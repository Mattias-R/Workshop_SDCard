
Z_Z.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08009670  08009670  00019670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf8  08009bf8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c00  08009c00  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c04  08009c04  00019c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cfc  20000090  08009c98  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d8c  08009c98  00024d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b296  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003156  00000000  00000000  0003b356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003f668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028504  00000000  00000000  000406e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018728  00000000  00000000  00068bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2db  00000000  00000000  00081314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f5ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  0016f644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009658 	.word	0x08009658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009658 	.word	0x08009658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <SELECT+0x18>)
 8000582:	f001 fcc5 	bl	8001f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f001 fa0e 	bl	80019a8 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400

08000594 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <DESELECT+0x18>)
 800059e:	f001 fcb7 	bl	8001f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fa00 	bl	80019a8 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400

080005b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SPI_TxByte+0x30>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d1f8      	bne.n	80005bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SPI_TxByte+0x30>)
 80005d2:	f003 fe00 	bl	80041d6 <HAL_SPI_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20001be4 	.word	0x20001be4

080005e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxBuffer+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d1f8      	bne.n	80005f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxBuffer+0x30>)
 8000608:	f003 fde5 	bl	80041d6 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20001be4 	.word	0x20001be4

08000618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000622:	bf00      	nop
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <SPI_RxByte+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	d1f8      	bne.n	8000624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000632:	1dba      	adds	r2, r7, #6
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_RxByte+0x34>)
 800063e:	f003 ff38 	bl	80044b2 <HAL_SPI_TransmitReceive>

	return data;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20001be4 	.word	0x20001be4

08000650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000658:	f7ff ffde 	bl	8000618 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SD_ReadyWait+0x30>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800067a:	f7ff ffcd 	bl	8000618 <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2bff      	cmp	r3, #255	; 0xff
 8000686:	d004      	beq.n	8000692 <SD_ReadyWait+0x26>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SD_ReadyWait+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	b29b      	uxth	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f3      	bne.n	800067a <SD_ReadyWait+0xe>

	return res;
 8000692:	79fb      	ldrb	r3, [r7, #7]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20002d04 	.word	0x20002d04

080006a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006ac:	f7ff ff72 	bl	8000594 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e005      	b.n	80006c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f7ff ff7a 	bl	80005b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	ddf6      	ble.n	80006b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006c8:	f7ff ff56 	bl	8000578 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e0:	2395      	movs	r3, #149	; 0x95
 80006e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7b 	bl	80005e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006ee:	e002      	b.n	80006f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	f7ff ff8f 	bl	8000618 <SPI_RxByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d002      	beq.n	8000706 <SD_PowerOn+0x66>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000706:	f7ff ff45 	bl	8000594 <DESELECT>
	SPI_TxByte(0XFF);
 800070a:	20ff      	movs	r0, #255	; 0xff
 800070c:	f7ff ff50 	bl	80005b0 <SPI_TxByte>

	PowerFlag = 1;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SD_PowerOn+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000ad 	.word	0x200000ad

08000724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SD_PowerOff+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	200000ad 	.word	0x200000ad

0800073c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_CheckPower+0x14>)
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000ad 	.word	0x200000ad

08000754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <SD_RxDataBlock+0x5c>)
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000764:	f7ff ff58 	bl	8000618 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d104      	bne.n	800077c <SD_RxDataBlock+0x28>
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SD_RxDataBlock+0x5c>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	b29b      	uxth	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f3      	bne.n	8000764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2bfe      	cmp	r3, #254	; 0xfe
 8000780:	d001      	beq.n	8000786 <SD_RxDataBlock+0x32>
 8000782:	2300      	movs	r3, #0
 8000784:	e00f      	b.n	80007a6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5f 	bl	8000650 <SPI_RxBytePtr>
	} while(len--);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	603a      	str	r2, [r7, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f4      	bne.n	8000786 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800079c:	f7ff ff3c 	bl	8000618 <SPI_RxByte>
	SPI_RxByte();
 80007a0:	f7ff ff3a 	bl	8000618 <SPI_RxByte>

	return TRUE;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20002d05 	.word	0x20002d05

080007b4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c4:	f7ff ff52 	bl	800066c <SD_ReadyWait>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	d001      	beq.n	80007d2 <SD_TxDataBlock+0x1e>
 80007ce:	2300      	movs	r3, #0
 80007d0:	e02f      	b.n	8000832 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff feeb 	bl	80005b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	2bfd      	cmp	r3, #253	; 0xfd
 80007de:	d020      	beq.n	8000822 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fefd 	bl	80005e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ea:	f7ff ff15 	bl	8000618 <SPI_RxByte>
		SPI_RxByte();
 80007ee:	f7ff ff13 	bl	8000618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007f2:	e00b      	b.n	800080c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f4:	f7ff ff10 	bl	8000618 <SPI_RxByte>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	2b05      	cmp	r3, #5
 8000804:	d006      	beq.n	8000814 <SD_TxDataBlock+0x60>
			i++;
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	3301      	adds	r3, #1
 800080a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	2b40      	cmp	r3, #64	; 0x40
 8000810:	d9f0      	bls.n	80007f4 <SD_TxDataBlock+0x40>
 8000812:	e000      	b.n	8000816 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000814:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000816:	bf00      	nop
 8000818:	f7ff fefe 	bl	8000618 <SPI_RxByte>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0fa      	beq.n	8000818 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	2b05      	cmp	r3, #5
 800082a:	d101      	bne.n	8000830 <SD_TxDataBlock+0x7c>
 800082c:	2301      	movs	r3, #1
 800082e:	e000      	b.n	8000832 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	6039      	str	r1, [r7, #0]
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000846:	f7ff ff11 	bl	800066c <SD_ReadyWait>
 800084a:	4603      	mov	r3, r0
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d001      	beq.n	8000854 <SD_SendCmd+0x1a>
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	e042      	b.n	80008da <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff feaa 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	0e1b      	lsrs	r3, r3, #24
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fea4 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe9e 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe98 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe93 	bl	80005b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b40      	cmp	r3, #64	; 0x40
 800088e:	d102      	bne.n	8000896 <SD_SendCmd+0x5c>
 8000890:	2395      	movs	r3, #149	; 0x95
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e007      	b.n	80008a6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b48      	cmp	r3, #72	; 0x48
 800089a:	d102      	bne.n	80008a2 <SD_SendCmd+0x68>
 800089c:	2387      	movs	r3, #135	; 0x87
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e001      	b.n	80008a6 <SD_SendCmd+0x6c>
	else crc = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe81 	bl	80005b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b4c      	cmp	r3, #76	; 0x4c
 80008b2:	d101      	bne.n	80008b8 <SD_SendCmd+0x7e>
 80008b4:	f7ff feb0 	bl	8000618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008b8:	230a      	movs	r3, #10
 80008ba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008bc:	f7ff feac 	bl	8000618 <SPI_RxByte>
 80008c0:	4603      	mov	r3, r0
 80008c2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	da05      	bge.n	80008d8 <SD_SendCmd+0x9e>
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	73bb      	strb	r3, [r7, #14]
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f1      	bne.n	80008bc <SD_SendCmd+0x82>

	return res;
 80008d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SD_disk_initialize+0x14>
 80008f4:	2301      	movs	r3, #1
 80008f6:	e0d6      	b.n	8000aa6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008f8:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <SD_disk_initialize+0x1cc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <SD_disk_initialize+0x2a>
 8000906:	4b6a      	ldr	r3, [pc, #424]	; (8000ab0 <SD_disk_initialize+0x1cc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	e0cb      	b.n	8000aa6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800090e:	f7ff fec7 	bl	80006a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000912:	f7ff fe31 	bl	8000578 <SELECT>

	/* check disk type */
	type = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800091a:	2100      	movs	r1, #0
 800091c:	2040      	movs	r0, #64	; 0x40
 800091e:	f7ff ff8c 	bl	800083a <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	f040 80a6 	bne.w	8000a76 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800092a:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <SD_disk_initialize+0x1d0>)
 800092c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000930:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000932:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000936:	2048      	movs	r0, #72	; 0x48
 8000938:	f7ff ff7f 	bl	800083a <SD_SendCmd>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d158      	bne.n	80009f4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e00c      	b.n	8000962 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000948:	7bfc      	ldrb	r4, [r7, #15]
 800094a:	f7ff fe65 	bl	8000618 <SPI_RxByte>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4423      	add	r3, r4
 8000958:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	3301      	adds	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d9ef      	bls.n	8000948 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000968:	7abb      	ldrb	r3, [r7, #10]
 800096a:	2b01      	cmp	r3, #1
 800096c:	f040 8083 	bne.w	8000a76 <SD_disk_initialize+0x192>
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	2baa      	cmp	r3, #170	; 0xaa
 8000974:	d17f      	bne.n	8000a76 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	; 0x77
 800097a:	f7ff ff5e 	bl	800083a <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d807      	bhi.n	8000994 <SD_disk_initialize+0xb0>
 8000984:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000988:	2069      	movs	r0, #105	; 0x69
 800098a:	f7ff ff56 	bl	800083a <SD_SendCmd>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <SD_disk_initialize+0x1d0>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1eb      	bne.n	8000976 <SD_disk_initialize+0x92>
 800099e:	e000      	b.n	80009a2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <SD_disk_initialize+0x1d0>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d064      	beq.n	8000a76 <SD_disk_initialize+0x192>
 80009ac:	2100      	movs	r1, #0
 80009ae:	207a      	movs	r0, #122	; 0x7a
 80009b0:	f7ff ff43 	bl	800083a <SD_SendCmd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d15d      	bne.n	8000a76 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e00c      	b.n	80009da <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009c0:	7bfc      	ldrb	r4, [r7, #15]
 80009c2:	f7ff fe29 	bl	8000618 <SPI_RxByte>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4423      	add	r3, r4
 80009d0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	3301      	adds	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d9ef      	bls.n	80009c0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SD_disk_initialize+0x10a>
 80009ea:	230c      	movs	r3, #12
 80009ec:	e000      	b.n	80009f0 <SD_disk_initialize+0x10c>
 80009ee:	2304      	movs	r3, #4
 80009f0:	73bb      	strb	r3, [r7, #14]
 80009f2:	e040      	b.n	8000a76 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009f4:	2100      	movs	r1, #0
 80009f6:	2077      	movs	r0, #119	; 0x77
 80009f8:	f7ff ff1f 	bl	800083a <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d808      	bhi.n	8000a14 <SD_disk_initialize+0x130>
 8000a02:	2100      	movs	r1, #0
 8000a04:	2069      	movs	r0, #105	; 0x69
 8000a06:	f7ff ff18 	bl	800083a <SD_SendCmd>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d801      	bhi.n	8000a14 <SD_disk_initialize+0x130>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e000      	b.n	8000a16 <SD_disk_initialize+0x132>
 8000a14:	2301      	movs	r3, #1
 8000a16:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a18:	7bbb      	ldrb	r3, [r7, #14]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d10e      	bne.n	8000a3c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2077      	movs	r0, #119	; 0x77
 8000a22:	f7ff ff0a 	bl	800083a <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d80e      	bhi.n	8000a4a <SD_disk_initialize+0x166>
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2069      	movs	r0, #105	; 0x69
 8000a30:	f7ff ff03 	bl	800083a <SD_SendCmd>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <SD_disk_initialize+0x166>
 8000a3a:	e00d      	b.n	8000a58 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2041      	movs	r0, #65	; 0x41
 8000a40:	f7ff fefb 	bl	800083a <SD_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d005      	beq.n	8000a56 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <SD_disk_initialize+0x1d0>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1e1      	bne.n	8000a18 <SD_disk_initialize+0x134>
 8000a54:	e000      	b.n	8000a58 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a56:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SD_disk_initialize+0x1d0>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <SD_disk_initialize+0x18e>
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	2050      	movs	r0, #80	; 0x50
 8000a68:	f7ff fee7 	bl	800083a <SD_SendCmd>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SD_disk_initialize+0x192>
 8000a72:	2300      	movs	r3, #0
 8000a74:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <SD_disk_initialize+0x1d4>)
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd8a 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fdca 	bl	8000618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <SD_disk_initialize+0x1cc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SD_disk_initialize+0x1cc>)
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e001      	b.n	8000aa0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a9c:	f7ff fe42 	bl	8000724 <SD_PowerOff>
	}

	return Stat;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_disk_initialize+0x1cc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20002d05 	.word	0x20002d05
 8000ab8:	200000ac 	.word	0x200000ac

08000abc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SD_disk_status+0x14>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e002      	b.n	8000ad6 <SD_disk_status+0x1a>
	return Stat;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SD_disk_status+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <SD_disk_read+0x1c>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <SD_disk_read+0x20>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e051      	b.n	8000bac <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SD_disk_read+0xcc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SD_disk_read+0x32>
 8000b16:	2303      	movs	r3, #3
 8000b18:	e048      	b.n	8000bac <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SD_disk_read+0xd0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_read+0x44>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b2c:	f7ff fd24 	bl	8000578 <SELECT>

	if (count == 1)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d111      	bne.n	8000b5a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2051      	movs	r0, #81	; 0x51
 8000b3a:	f7ff fe7e 	bl	800083a <SD_SendCmd>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d129      	bne.n	8000b98 <SD_disk_read+0xb0>
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f7ff fe03 	bl	8000754 <SD_RxDataBlock>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d021      	beq.n	8000b98 <SD_disk_read+0xb0>
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	e01e      	b.n	8000b98 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2052      	movs	r0, #82	; 0x52
 8000b5e:	f7ff fe6c 	bl	800083a <SD_SendCmd>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d117      	bne.n	8000b98 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fdf1 	bl	8000754 <SD_RxDataBlock>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00a      	beq.n	8000b8e <SD_disk_read+0xa6>
				buff += 512;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ed      	bne.n	8000b68 <SD_disk_read+0x80>
 8000b8c:	e000      	b.n	8000b90 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b8e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	204c      	movs	r0, #76	; 0x4c
 8000b94:	f7ff fe51 	bl	800083a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b98:	f7ff fcfc 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000b9c:	f7ff fd3c 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	200000ac 	.word	0x200000ac

08000bbc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <SD_disk_write+0x1c>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <SD_disk_write+0x20>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e06b      	b.n	8000cb4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <SD_disk_write+0x100>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SD_disk_write+0x32>
 8000bea:	2303      	movs	r3, #3
 8000bec:	e062      	b.n	8000cb4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <SD_disk_write+0x100>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_write+0x44>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e059      	b.n	8000cb4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <SD_disk_write+0x104>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <SD_disk_write+0x56>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c12:	f7ff fcb1 	bl	8000578 <SELECT>

	if (count == 1)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d110      	bne.n	8000c3e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2058      	movs	r0, #88	; 0x58
 8000c20:	f7ff fe0b 	bl	800083a <SD_SendCmd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d13a      	bne.n	8000ca0 <SD_disk_write+0xe4>
 8000c2a:	21fe      	movs	r1, #254	; 0xfe
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff fdc1 	bl	80007b4 <SD_TxDataBlock>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d033      	beq.n	8000ca0 <SD_disk_write+0xe4>
			count = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	e030      	b.n	8000ca0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <SD_disk_write+0x104>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2077      	movs	r0, #119	; 0x77
 8000c4e:	f7ff fdf4 	bl	800083a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	2057      	movs	r0, #87	; 0x57
 8000c56:	f7ff fdf0 	bl	800083a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2059      	movs	r0, #89	; 0x59
 8000c5e:	f7ff fdec 	bl	800083a <SD_SendCmd>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11b      	bne.n	8000ca0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c68:	21fc      	movs	r1, #252	; 0xfc
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f7ff fda2 	bl	80007b4 <SD_TxDataBlock>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <SD_disk_write+0xd0>
				buff += 512;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c7c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1ee      	bne.n	8000c68 <SD_disk_write+0xac>
 8000c8a:	e000      	b.n	8000c8e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c8c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c8e:	21fd      	movs	r1, #253	; 0xfd
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd8f 	bl	80007b4 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ca0:	f7ff fc78 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000ca4:	f7ff fcb8 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200000ac 	.word	0x200000ac

08000cc4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SD_disk_ioctl+0x1e>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e115      	b.n	8000f0e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d124      	bne.n	8000d38 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d012      	beq.n	8000d1c <SD_disk_ioctl+0x58>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dc1a      	bgt.n	8000d30 <SD_disk_ioctl+0x6c>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SD_disk_ioctl+0x40>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d006      	beq.n	8000d10 <SD_disk_ioctl+0x4c>
 8000d02:	e015      	b.n	8000d30 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d04:	f7ff fd0e 	bl	8000724 <SD_PowerOff>
			res = RES_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0e:	e0fc      	b.n	8000f0a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d10:	f7ff fcc6 	bl	80006a0 <SD_PowerOn>
			res = RES_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1a:	e0f6      	b.n	8000f0a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	1c5c      	adds	r4, r3, #1
 8000d20:	f7ff fd0c 	bl	800073c <SD_CheckPower>
 8000d24:	4603      	mov	r3, r0
 8000d26:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2e:	e0ec      	b.n	8000f0a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d30:	2304      	movs	r3, #4
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d36:	e0e8      	b.n	8000f0a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d38:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <SD_disk_ioctl+0x254>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SD_disk_ioctl+0x86>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e0e1      	b.n	8000f0e <SD_disk_ioctl+0x24a>

		SELECT();
 8000d4a:	f7ff fc15 	bl	8000578 <SELECT>

		switch (ctrl)
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	2b0d      	cmp	r3, #13
 8000d52:	f200 80cb 	bhi.w	8000eec <SD_disk_ioctl+0x228>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <SD_disk_ioctl+0x98>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000e57 	.word	0x08000e57
 8000d60:	08000d95 	.word	0x08000d95
 8000d64:	08000e47 	.word	0x08000e47
 8000d68:	08000eed 	.word	0x08000eed
 8000d6c:	08000eed 	.word	0x08000eed
 8000d70:	08000eed 	.word	0x08000eed
 8000d74:	08000eed 	.word	0x08000eed
 8000d78:	08000eed 	.word	0x08000eed
 8000d7c:	08000eed 	.word	0x08000eed
 8000d80:	08000eed 	.word	0x08000eed
 8000d84:	08000eed 	.word	0x08000eed
 8000d88:	08000e69 	.word	0x08000e69
 8000d8c:	08000e8d 	.word	0x08000e8d
 8000d90:	08000eb1 	.word	0x08000eb1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d94:	2100      	movs	r1, #0
 8000d96:	2049      	movs	r0, #73	; 0x49
 8000d98:	f7ff fd4f 	bl	800083a <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 80a8 	bne.w	8000ef4 <SD_disk_ioctl+0x230>
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2110      	movs	r1, #16
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fcd2 	bl	8000754 <SD_RxDataBlock>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 809e 	beq.w	8000ef4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	099b      	lsrs	r3, r3, #6
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10e      	bne.n	8000de0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dc2:	7d7b      	ldrb	r3, [r7, #21]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	7d3b      	ldrb	r3, [r7, #20]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd6:	8bfb      	ldrh	r3, [r7, #30]
 8000dd8:	029a      	lsls	r2, r3, #10
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e02e      	b.n	8000e3e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000de0:	7c7b      	ldrb	r3, [r7, #17]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	7dbb      	ldrb	r3, [r7, #22]
 8000dea:	09db      	lsrs	r3, r3, #7
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0306 	and.w	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3302      	adds	r3, #2
 8000e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e08:	7d3b      	ldrb	r3, [r7, #20]
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	7cfb      	ldrb	r3, [r7, #19]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	7cbb      	ldrb	r3, [r7, #18]
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e30:	8bfa      	ldrh	r2, [r7, #30]
 8000e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e36:	3b09      	subs	r3, #9
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e44:	e056      	b.n	8000ef4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e54:	e055      	b.n	8000f02 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e56:	f7ff fc09 	bl	800066c <SD_ReadyWait>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	d14b      	bne.n	8000ef8 <SD_disk_ioctl+0x234>
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e66:	e047      	b.n	8000ef8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2049      	movs	r0, #73	; 0x49
 8000e6c:	f7ff fce5 	bl	800083a <SD_SendCmd>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d142      	bne.n	8000efc <SD_disk_ioctl+0x238>
 8000e76:	2110      	movs	r1, #16
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc6b 	bl	8000754 <SD_RxDataBlock>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d03b      	beq.n	8000efc <SD_disk_ioctl+0x238>
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e8a:	e037      	b.n	8000efc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	204a      	movs	r0, #74	; 0x4a
 8000e90:	f7ff fcd3 	bl	800083a <SD_SendCmd>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d132      	bne.n	8000f00 <SD_disk_ioctl+0x23c>
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	6a38      	ldr	r0, [r7, #32]
 8000e9e:	f7ff fc59 	bl	8000754 <SD_RxDataBlock>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02b      	beq.n	8000f00 <SD_disk_ioctl+0x23c>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eae:	e027      	b.n	8000f00 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	207a      	movs	r0, #122	; 0x7a
 8000eb4:	f7ff fcc1 	bl	800083a <SD_SendCmd>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec4:	e00b      	b.n	8000ede <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ec6:	6a3c      	ldr	r4, [r7, #32]
 8000ec8:	1c63      	adds	r3, r4, #1
 8000eca:	623b      	str	r3, [r7, #32]
 8000ecc:	f7ff fba4 	bl	8000618 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d9ef      	bls.n	8000ec6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000eec:	2304      	movs	r3, #4
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef2:	e006      	b.n	8000f02 <SD_disk_ioctl+0x23e>
			break;
 8000ef4:	bf00      	nop
 8000ef6:	e004      	b.n	8000f02 <SD_disk_ioctl+0x23e>
			break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <SD_disk_ioctl+0x23e>
			break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <SD_disk_ioctl+0x23e>
			break;
 8000f00:	bf00      	nop
		}

		DESELECT();
 8000f02:	f7ff fb47 	bl	8000594 <DESELECT>
		SPI_RxByte();
 8000f06:	f7ff fb87 	bl	8000618 <SPI_RxByte>
	}

	return res;
 8000f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	372c      	adds	r7, #44	; 0x2c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000000 	.word	0x20000000

08000f1c <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char * string)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <send_uart+0x2c>)
 8000f3a:	f003 fe7f 	bl	8004c3c <HAL_UART_Transmit>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20001c48 	.word	0x20001c48

08000f4c <clear_buffer>:
	int i=0;
	while(*buf++ != '\0') i++;
	return i;
}
void clear_buffer (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e007      	b.n	8000f68 <clear_buffer+0x1c>
		buffer [i] = '\0';
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <clear_buffer+0x34>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++){
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6e:	dbf3      	blt.n	8000f58 <clear_buffer+0xc>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200013f0 	.word	0x200013f0

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f000 fc91 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f967 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa65 	bl	8001460 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f96:	f000 fa33 	bl	8001400 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f9a:	f000 f9b3 	bl	8001304 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f9f1 	bl	8001384 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fa2:	f004 fb19 	bl	80055d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &sensor_on, 2, 1000);
 8000fa6:	4b93      	ldr	r3, [pc, #588]	; (80011f4 <main+0x270>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b299      	uxth	r1, r3
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	4a90      	ldr	r2, [pc, #576]	; (80011f8 <main+0x274>)
 8000fb6:	4891      	ldr	r0, [pc, #580]	; (80011fc <main+0x278>)
 8000fb8:	f001 f852 	bl	8002060 <HAL_I2C_Master_Transmit>
 	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &data, 1, 1000);
 8000fbc:	4b90      	ldr	r3, [pc, #576]	; (8001200 <main+0x27c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4a8e      	ldr	r2, [pc, #568]	; (8001204 <main+0x280>)
 8000fcc:	488b      	ldr	r0, [pc, #556]	; (80011fc <main+0x278>)
 8000fce:	f001 f93b 	bl	8002248 <HAL_I2C_Master_Receive>
 	  HAL_Delay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f000 fce7 	bl	80019a8 <HAL_Delay>
 	  sprintf(msg, "%d", data);
 8000fda:	4b8a      	ldr	r3, [pc, #552]	; (8001204 <main+0x280>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4989      	ldr	r1, [pc, #548]	; (8001208 <main+0x284>)
 8000fe2:	488a      	ldr	r0, [pc, #552]	; (800120c <main+0x288>)
 8000fe4:	f007 ff0a 	bl	8008dfc <siprintf>
 	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 8000fe8:	4888      	ldr	r0, [pc, #544]	; (800120c <main+0x288>)
 8000fea:	f7ff f8f1 	bl	80001d0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	4985      	ldr	r1, [pc, #532]	; (800120c <main+0x288>)
 8000ff8:	4885      	ldr	r0, [pc, #532]	; (8001210 <main+0x28c>)
 8000ffa:	f003 fe1f 	bl	8004c3c <HAL_UART_Transmit>

 	 HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &sensor_on, 2, 1000);
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <main+0x270>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b299      	uxth	r1, r3
 8001004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2302      	movs	r3, #2
 800100c:	4a7a      	ldr	r2, [pc, #488]	; (80011f8 <main+0x274>)
 800100e:	487b      	ldr	r0, [pc, #492]	; (80011fc <main+0x278>)
 8001010:	f001 f826 	bl	8002060 <HAL_I2C_Master_Transmit>
 		  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &data, 1, 1000);
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <main+0x27c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b299      	uxth	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	4a78      	ldr	r2, [pc, #480]	; (8001204 <main+0x280>)
 8001024:	4875      	ldr	r0, [pc, #468]	; (80011fc <main+0x278>)
 8001026:	f001 f90f 	bl	8002248 <HAL_I2C_Master_Receive>
 		  HAL_Delay(1000);
 800102a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102e:	f000 fcbb 	bl	80019a8 <HAL_Delay>
 		  sprintf(msg, "%d", data);
 8001032:	4b74      	ldr	r3, [pc, #464]	; (8001204 <main+0x280>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4973      	ldr	r1, [pc, #460]	; (8001208 <main+0x284>)
 800103a:	4874      	ldr	r0, [pc, #464]	; (800120c <main+0x288>)
 800103c:	f007 fede 	bl	8008dfc <siprintf>
 		  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 8001040:	4872      	ldr	r0, [pc, #456]	; (800120c <main+0x288>)
 8001042:	f7ff f8c5 	bl	80001d0 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	496f      	ldr	r1, [pc, #444]	; (800120c <main+0x288>)
 8001050:	486f      	ldr	r0, [pc, #444]	; (8001210 <main+0x28c>)
 8001052:	f003 fdf3 	bl	8004c3c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay (5500);
 8001056:	f241 507c 	movw	r0, #5500	; 0x157c
 800105a:	f000 fca5 	bl	80019a8 <HAL_Delay>
	  fresult = f_mount(&fs, "/", 1);
 800105e:	2201      	movs	r2, #1
 8001060:	496c      	ldr	r1, [pc, #432]	; (8001214 <main+0x290>)
 8001062:	486d      	ldr	r0, [pc, #436]	; (8001218 <main+0x294>)
 8001064:	f006 fd0a 	bl	8007a7c <f_mount>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b6b      	ldr	r3, [pc, #428]	; (800121c <main+0x298>)
 800106e:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001070:	4b6a      	ldr	r3, [pc, #424]	; (800121c <main+0x298>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <main+0xfc>
 8001078:	4869      	ldr	r0, [pc, #420]	; (8001220 <main+0x29c>)
 800107a:	f7ff ff4f 	bl	8000f1c <send_uart>
 800107e:	e002      	b.n	8001086 <main+0x102>
	  	else send_uart("SD CARD mounted successfully...\n\n");
 8001080:	4868      	ldr	r0, [pc, #416]	; (8001224 <main+0x2a0>)
 8001082:	f7ff ff4b 	bl	8000f1c <send_uart>

	  HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &tempout_lo, 1, 1000);
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <main+0x270>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b299      	uxth	r1, r3
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	4a64      	ldr	r2, [pc, #400]	; (8001228 <main+0x2a4>)
 8001096:	4859      	ldr	r0, [pc, #356]	; (80011fc <main+0x278>)
 8001098:	f000 ffe2 	bl	8002060 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &temp_lo, 1, 1000);
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <main+0x27c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	4a60      	ldr	r2, [pc, #384]	; (800122c <main+0x2a8>)
 80010ac:	4853      	ldr	r0, [pc, #332]	; (80011fc <main+0x278>)
 80010ae:	f001 f8cb 	bl	8002248 <HAL_I2C_Master_Receive>

	  HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &tempout_hi, 1, 1000);
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <main+0x270>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b299      	uxth	r1, r3
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	4a5b      	ldr	r2, [pc, #364]	; (8001230 <main+0x2ac>)
 80010c2:	484e      	ldr	r0, [pc, #312]	; (80011fc <main+0x278>)
 80010c4:	f000 ffcc 	bl	8002060 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &temp_hi, 1, 1000);
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <main+0x27c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b299      	uxth	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	4a57      	ldr	r2, [pc, #348]	; (8001234 <main+0x2b0>)
 80010d8:	4848      	ldr	r0, [pc, #288]	; (80011fc <main+0x278>)
 80010da:	f001 f8b5 	bl	8002248 <HAL_I2C_Master_Receive>

	  HAL_Delay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e2:	f000 fc61 	bl	80019a8 <HAL_Delay>
	  sprintf(msg, "%d \n\r", temp_hi);
 80010e6:	4b53      	ldr	r3, [pc, #332]	; (8001234 <main+0x2b0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4952      	ldr	r1, [pc, #328]	; (8001238 <main+0x2b4>)
 80010ee:	4847      	ldr	r0, [pc, #284]	; (800120c <main+0x288>)
 80010f0:	f007 fe84 	bl	8008dfc <siprintf>
	  //HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
	  sprintf(msg, "%d \n\r", temp_lo);
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <main+0x2a8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	494f      	ldr	r1, [pc, #316]	; (8001238 <main+0x2b4>)
 80010fc:	4843      	ldr	r0, [pc, #268]	; (800120c <main+0x288>)
 80010fe:	f007 fe7d 	bl	8008dfc <siprintf>
	  //HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);

	  temp = (temp_hi*256+temp_lo);
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <main+0x2b0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <main+0x2a8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4413      	add	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <main+0x2b8>)
 8001118:	801a      	strh	r2, [r3, #0]
	  temp = 20+temp/100;
 800111a:	4b48      	ldr	r3, [pc, #288]	; (800123c <main+0x2b8>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	4a48      	ldr	r2, [pc, #288]	; (8001240 <main+0x2bc>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	095b      	lsrs	r3, r3, #5
 8001126:	b29b      	uxth	r3, r3
 8001128:	3314      	adds	r3, #20
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <main+0x2b8>)
 800112e:	801a      	strh	r2, [r3, #0]
	  sprintf(msg, "%d \n\r", temp);
 8001130:	4b42      	ldr	r3, [pc, #264]	; (800123c <main+0x2b8>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4940      	ldr	r1, [pc, #256]	; (8001238 <main+0x2b4>)
 8001138:	4834      	ldr	r0, [pc, #208]	; (800120c <main+0x288>)
 800113a:	f007 fe5f 	bl	8008dfc <siprintf>
	 // HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);


  	/* Open the file with write access */
 	fresult = f_open(&fil, "temp.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800113e:	2203      	movs	r2, #3
 8001140:	4940      	ldr	r1, [pc, #256]	; (8001244 <main+0x2c0>)
 8001142:	4841      	ldr	r0, [pc, #260]	; (8001248 <main+0x2c4>)
 8001144:	f006 fce0 	bl	8007b08 <f_open>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <main+0x298>)
 800114e:	701a      	strb	r2, [r3, #0]

 	/* Move to offset to the end of the file */
 	fresult = f_lseek(&fil, f_size(&fil));
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <main+0x2c4>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4619      	mov	r1, r3
 8001156:	483c      	ldr	r0, [pc, #240]	; (8001248 <main+0x2c4>)
 8001158:	f007 fa3d 	bl	80085d6 <f_lseek>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b2e      	ldr	r3, [pc, #184]	; (800121c <main+0x298>)
 8001162:	701a      	strb	r2, [r3, #0]

   	/* write the string to the file */
   	fresult = f_puts("The temperature is: ", &fil);
 8001164:	4938      	ldr	r1, [pc, #224]	; (8001248 <main+0x2c4>)
 8001166:	4839      	ldr	r0, [pc, #228]	; (800124c <main+0x2c8>)
 8001168:	f007 fcd0 	bl	8008b0c <f_puts>
 800116c:	4603      	mov	r3, r0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <main+0x298>)
 8001172:	701a      	strb	r2, [r3, #0]
   	//fresult = f_lseek(&fil, f_size(&fil));
   	fresult = f_puts(&msg, &fil);
 8001174:	4934      	ldr	r1, [pc, #208]	; (8001248 <main+0x2c4>)
 8001176:	4825      	ldr	r0, [pc, #148]	; (800120c <main+0x288>)
 8001178:	f007 fcc8 	bl	8008b0c <f_puts>
 800117c:	4603      	mov	r3, r0
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <main+0x298>)
 8001182:	701a      	strb	r2, [r3, #0]
   	fresult = f_lseek(&fil, f_size(&fil));
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <main+0x2c4>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4619      	mov	r1, r3
 800118a:	482f      	ldr	r0, [pc, #188]	; (8001248 <main+0x2c4>)
 800118c:	f007 fa23 	bl	80085d6 <f_lseek>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <main+0x298>)
 8001196:	701a      	strb	r2, [r3, #0]
   	fresult = f_puts("\n", &fil);
 8001198:	492b      	ldr	r1, [pc, #172]	; (8001248 <main+0x2c4>)
 800119a:	482d      	ldr	r0, [pc, #180]	; (8001250 <main+0x2cc>)
 800119c:	f007 fcb6 	bl	8008b0c <f_puts>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <main+0x298>)
 80011a6:	701a      	strb	r2, [r3, #0]
   	f_close (&fil);
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <main+0x2c4>)
 80011aa:	f007 f9ea 	bl	8008582 <f_close>

   	clear_buffer();
 80011ae:	f7ff fecd 	bl	8000f4c <clear_buffer>

   	/* Open to read the file */
   	fresult = f_open (&fil, "temp.txt", FA_READ);
 80011b2:	2201      	movs	r2, #1
 80011b4:	4923      	ldr	r1, [pc, #140]	; (8001244 <main+0x2c0>)
 80011b6:	4824      	ldr	r0, [pc, #144]	; (8001248 <main+0x2c4>)
 80011b8:	f006 fca6 	bl	8007b08 <f_open>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <main+0x298>)
 80011c2:	701a      	strb	r2, [r3, #0]

   	/* Read string from the file */
   	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <main+0x2c4>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <main+0x2d0>)
 80011ca:	4923      	ldr	r1, [pc, #140]	; (8001258 <main+0x2d4>)
 80011cc:	481e      	ldr	r0, [pc, #120]	; (8001248 <main+0x2c4>)
 80011ce:	f006 fe67 	bl	8007ea0 <f_read>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <main+0x298>)
 80011d8:	701a      	strb	r2, [r3, #0]
   	//if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
   	send_uart(buffer);
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <main+0x2d4>)
 80011dc:	f7ff fe9e 	bl	8000f1c <send_uart>
   	send_uart("\n\n");
 80011e0:	481e      	ldr	r0, [pc, #120]	; (800125c <main+0x2d8>)
 80011e2:	f7ff fe9b 	bl	8000f1c <send_uart>

   	/* Close file */
   	f_close(&fil);
 80011e6:	4818      	ldr	r0, [pc, #96]	; (8001248 <main+0x2c4>)
 80011e8:	f007 f9cb 	bl	8008582 <f_close>

   	clear_buffer();
 80011ec:	f7ff feae 	bl	8000f4c <clear_buffer>
	  HAL_Delay (5500);
 80011f0:	e731      	b.n	8001056 <main+0xd2>
 80011f2:	bf00      	nop
 80011f4:	20000002 	.word	0x20000002
 80011f8:	20000008 	.word	0x20000008
 80011fc:	2000132c 	.word	0x2000132c
 8001200:	20000001 	.word	0x20000001
 8001204:	20000005 	.word	0x20000005
 8001208:	08009670 	.word	0x08009670
 800120c:	20001380 	.word	0x20001380
 8001210:	20001c48 	.word	0x20001c48
 8001214:	08009674 	.word	0x08009674
 8001218:	200002f4 	.word	0x200002f4
 800121c:	20001be0 	.word	0x20001be0
 8001220:	08009678 	.word	0x08009678
 8001224:	0800969c 	.word	0x0800969c
 8001228:	20000003 	.word	0x20000003
 800122c:	20001cd0 	.word	0x20001cd0
 8001230:	20000004 	.word	0x20000004
 8001234:	200013ea 	.word	0x200013ea
 8001238:	080096c0 	.word	0x080096c0
 800123c:	200013e8 	.word	0x200013e8
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	080096c8 	.word	0x080096c8
 8001248:	20001cd4 	.word	0x20001cd4
 800124c:	080096d4 	.word	0x080096d4
 8001250:	080096ec 	.word	0x080096ec
 8001254:	200013e4 	.word	0x200013e4
 8001258:	200013f0 	.word	0x200013f0
 800125c:	080096f0 	.word	0x080096f0

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2244      	movs	r2, #68	; 0x44
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f007 fdbc 	bl	8008dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001286:	f001 fbf3 	bl	8002a70 <HAL_PWREx_ControlVoltageScaling>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001290:	f000 f94c 	bl	800152c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129e:	2310      	movs	r3, #16
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a6:	2302      	movs	r3, #2
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012ae:	230a      	movs	r3, #10
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fc2a 	bl	8002b1c <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012ce:	f000 f92d 	bl	800152c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2303      	movs	r3, #3
 80012d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2104      	movs	r1, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fff0 	bl	80032d0 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012f6:	f000 f919 	bl	800152c <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3758      	adds	r7, #88	; 0x58
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_I2C1_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_I2C1_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_I2C1_Init+0x74>)
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <MX_I2C1_Init+0x7c>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_I2C1_Init+0x74>)
 800131c:	2201      	movs	r2, #1
 800131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <MX_I2C1_Init+0x74>)
 8001340:	f000 fdfe 	bl	8001f40 <HAL_I2C_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134a:	f000 f8ef 	bl	800152c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <MX_I2C1_Init+0x74>)
 8001352:	f001 fae7 	bl	8002924 <HAL_I2CEx_ConfigAnalogFilter>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800135c:	f000 f8e6 	bl	800152c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_I2C1_Init+0x74>)
 8001364:	f001 fb29 	bl	80029ba <HAL_I2CEx_ConfigDigitalFilter>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 f8dd 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000132c 	.word	0x2000132c
 800137c:	40005400 	.word	0x40005400
 8001380:	00702991 	.word	0x00702991

08001384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_SPI1_Init+0x74>)
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <MX_SPI1_Init+0x78>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_SPI1_Init+0x74>)
 8001390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_SPI1_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI1_Init+0x74>)
 800139e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013ba:	2230      	movs	r2, #48	; 0x30
 80013bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013d2:	2207      	movs	r2, #7
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013de:	2208      	movs	r2, #8
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_SPI1_Init+0x74>)
 80013e4:	f002 fe54 	bl	8004090 <HAL_SPI_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 f89d 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20001be4 	.word	0x20001be4
 80013fc:	40013000 	.word	0x40013000

08001400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <MX_USART2_UART_Init+0x5c>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001444:	f003 fbac 	bl	8004ba0 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 f86d 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20001c48 	.word	0x20001c48
 800145c:	40004400 	.word	0x40004400

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_GPIO_Init+0xc0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a29      	ldr	r2, [pc, #164]	; (8001520 <MX_GPIO_Init+0xc0>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_GPIO_Init+0xc0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_GPIO_Init+0xc0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_GPIO_Init+0xc0>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_GPIO_Init+0xc0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_GPIO_Init+0xc0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2101      	movs	r1, #1
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <MX_GPIO_Init+0xc4>)
 80014dc:	f000 fd18 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <MX_GPIO_Init+0xc8>)
 80014f8:	f000 fb60 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0xc4>)
 8001514:	f000 fb52 	bl	8001bbc <HAL_GPIO_Init>

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400
 8001528:	48000800 	.word	0x48000800

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x44>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6613      	str	r3, [r2, #96]	; 0x60
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x44>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x44>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x44>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0ac      	sub	sp, #176	; 0xb0
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2288      	movs	r2, #136	; 0x88
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f007 fc23 	bl	8008dec <memset>
  if(hi2c->Instance==I2C1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_I2C_MspInit+0xb0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d13b      	bne.n	8001628 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f8ab 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015c8:	f7ff ffb0 	bl	800152c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fe:	2304      	movs	r3, #4
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001608:	4619      	mov	r1, r3
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 800160c:	f000 fad6 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 8001616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161a:	6593      	str	r3, [r2, #88]	; 0x58
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	37b0      	adds	r7, #176	; 0xb0
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005400 	.word	0x40005400
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_SPI_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d128      	bne.n	80016b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	6613      	str	r3, [r2, #96]	; 0x60
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_SPI_MspInit+0x80>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x80>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23e0      	movs	r3, #224	; 0xe0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169e:	2305      	movs	r3, #5
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f000 fa86 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0ac      	sub	sp, #176	; 0xb0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2288      	movs	r2, #136	; 0x88
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 fb83 	bl	8008dec <memset>
  if(huart->Instance==USART2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_UART_MspInit+0xb0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d13b      	bne.n	8001768 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 f80b 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001708:	f7ff ff10 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_UART_MspInit+0xb4>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_UART_MspInit+0xb4>)
 8001712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_UART_MspInit+0xb4>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_UART_MspInit+0xb4>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_UART_MspInit+0xb4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_UART_MspInit+0xb4>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800173c:	230c      	movs	r3, #12
 800173e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f000 fa2a 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	37b0      	adds	r7, #176	; 0xb0
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40004400 	.word	0x40004400
 8001774:	40021000 	.word	0x40021000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f8d0 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f007 facc 	bl	8008d98 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20018000 	.word	0x20018000
 800182c:	00000400 	.word	0x00000400
 8001830:	200000b0 	.word	0x200000b0
 8001834:	20004d90 	.word	0x20004d90

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001860:	f7ff ffea 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <LoopForever+0x6>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <LoopForever+0xe>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	; (80018a8 <LoopForever+0x16>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f007 fa8b 	bl	8008da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188e:	f7ff fb79 	bl	8000f84 <main>

08001892 <LoopForever>:

LoopForever:
    b LoopForever
 8001892:	e7fe      	b.n	8001892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80018a0:	08009c08 	.word	0x08009c08
  ldr r2, =_sbss
 80018a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018a8:	20004d8c 	.word	0x20004d8c

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_Init+0x3c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_Init+0x3c>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f000 f944 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 f80f 	bl	80018f0 <HAL_InitTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	e001      	b.n	80018e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018de:	f7ff fe2b 	bl	8001538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_InitTick+0x70>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f941 	bl	8001ba2 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d809      	bhi.n	8001940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f919 	bl	8001b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_InitTick+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e007      	b.n	8001950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e004      	b.n	8001950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000014 	.word	0x20000014
 8001960:	2000000c 	.word	0x2000000c
 8001964:	20000010 	.word	0x20000010

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000014 	.word	0x20000014
 800198c:	20002d08 	.word	0x20002d08

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20002d08 	.word	0x20002d08

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000014 	.word	0x20000014

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff47 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff5c 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffb0 	bl	8001b10 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e17f      	b.n	8001ecc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8171 	beq.w	8001ec6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x40>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d118      	bne.n	8001c9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c70:	2201      	movs	r2, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f003 0201 	and.w	r2, r3, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d017      	beq.n	8001cd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d123      	bne.n	8001d2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	6939      	ldr	r1, [r7, #16]
 8001d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ac 	beq.w	8001ec6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_GPIO_Init+0x330>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	4a5e      	ldr	r2, [pc, #376]	; (8001eec <HAL_GPIO_Init+0x330>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_GPIO_Init+0x330>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d86:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <HAL_GPIO_Init+0x334>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x242>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_GPIO_Init+0x338>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x23e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_GPIO_Init+0x33c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x23a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x340>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x236>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x344>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x232>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_GPIO_Init+0x348>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x22e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_GPIO_Init+0x34c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x22a>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00c      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00a      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e10:	4937      	ldr	r1, [pc, #220]	; (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e42:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec0:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f47f ae78 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000c00 	.word	0x48000c00
 8001f00:	48001000 	.word	0x48001000
 8001f04:	48001400 	.word	0x48001400
 8001f08:	48001800 	.word	0x48001800
 8001f0c:	40010400 	.word	0x40010400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e081      	b.n	8002056 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fb0a 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e006      	b.n	8001fc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d104      	bne.n	8001fda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69d9      	ldr	r1, [r3, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	f040 80da 	bne.w	8002236 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Transmit+0x30>
 800208c:	2302      	movs	r3, #2
 800208e:	e0d3      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002098:	f7ff fc7a 	bl	8001990 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2319      	movs	r3, #25
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f9e6 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0be      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2221      	movs	r2, #33	; 0x21
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2210      	movs	r2, #16
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2bff      	cmp	r3, #255	; 0xff
 80020ea:	d90e      	bls.n	800210a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_I2C_Master_Transmit+0x1e0>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fbdc 	bl	80028c0 <I2C_TransferConfig>
 8002108:	e06c      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b48      	ldr	r3, [pc, #288]	; (8002240 <HAL_I2C_Master_Transmit+0x1e0>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fbcb 	bl	80028c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800212a:	e05b      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f9e3 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07b      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d034      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x184>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d130      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f975 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04d      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d90e      	bls.n	80021c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	2300      	movs	r3, #0
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fb7f 	bl	80028c0 <I2C_TransferConfig>
 80021c2:	e00f      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	8979      	ldrh	r1, [r7, #10]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fb6e 	bl	80028c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d19e      	bne.n	800212c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f9c2 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e01a      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2220      	movs	r2, #32
 8002208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_I2C_Master_Transmit+0x1e4>)
 8002216:	400b      	ands	r3, r1
 8002218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	80002000 	.word	0x80002000
 8002244:	fe00e800 	.word	0xfe00e800

08002248 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	460b      	mov	r3, r1
 8002256:	817b      	strh	r3, [r7, #10]
 8002258:	4613      	mov	r3, r2
 800225a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	f040 80db 	bne.w	8002420 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Master_Receive+0x30>
 8002274:	2302      	movs	r3, #2
 8002276:	e0d4      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002280:	f7ff fb86 	bl	8001990 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2319      	movs	r3, #25
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f8f2 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0bf      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2222      	movs	r2, #34	; 0x22
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2210      	movs	r2, #16
 80022ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	893a      	ldrh	r2, [r7, #8]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d90e      	bls.n	80022f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_I2C_Master_Receive+0x1e4>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fae8 	bl	80028c0 <I2C_TransferConfig>
 80022f0:	e06d      	b.n	80023ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	b2da      	uxtb	r2, r3
 8002302:	8979      	ldrh	r1, [r7, #10]
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_I2C_Master_Receive+0x1e4>)
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fad7 	bl	80028c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002312:	e05c      	b.n	80023ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	6a39      	ldr	r1, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f96b 	bl	80025f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e07c      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d034      	beq.n	80023ce <HAL_I2C_Master_Receive+0x186>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d130      	bne.n	80023ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2200      	movs	r2, #0
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f880 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e04d      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	2bff      	cmp	r3, #255	; 0xff
 800238e:	d90e      	bls.n	80023ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2da      	uxtb	r2, r3
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fa8a 	bl	80028c0 <I2C_TransferConfig>
 80023ac:	e00f      	b.n	80023ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa79 	bl	80028c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d19d      	bne.n	8002314 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	6a39      	ldr	r1, [r7, #32]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f8cd 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e01a      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2220      	movs	r2, #32
 80023f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_I2C_Master_Receive+0x1e8>)
 8002400:	400b      	ands	r3, r1
 8002402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	80002400 	.word	0x80002400
 8002430:	fe00e800 	.word	0xfe00e800

08002434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d103      	bne.n	8002452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d007      	beq.n	8002470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	619a      	str	r2, [r3, #24]
  }
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248c:	e022      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d01e      	beq.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7ff fa7b 	bl	8001990 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d113      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00f      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d0cd      	beq.n	800248e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002508:	e02c      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f8ea 	bl	80026e8 <I2C_IsErrorOccurred>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e02a      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01e      	beq.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7ff fa33 	bl	8001990 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e007      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d1cb      	bne.n	800250a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	e028      	b.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f8aa 	bl	80026e8 <I2C_IsErrorOccurred>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e026      	b.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7ff f9f7 	bl	8001990 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d113      	bne.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d1cf      	bne.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002600:	e064      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f86e 	bl	80026e8 <I2C_IsErrorOccurred>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e062      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b20      	cmp	r3, #32
 8002622:	d138      	bne.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d105      	bne.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e04e      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b10      	cmp	r3, #16
 800264a:	d107      	bne.n	800265c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2210      	movs	r2, #16
 8002652:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2204      	movs	r2, #4
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
 800265a:	e002      	b.n	8002662 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2220      	movs	r2, #32
 8002668:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002676:	400b      	ands	r3, r1
 8002678:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e022      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7ff f97b 	bl	8001990 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d193      	bne.n	8002602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d075      	beq.n	8002800 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2210      	movs	r2, #16
 800271a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800271c:	e056      	b.n	80027cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d052      	beq.n	80027cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7ff f933 	bl	8001990 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_IsErrorOccurred+0x54>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d147      	bne.n	80027cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800274e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275e:	d12e      	bne.n	80027be <I2C_IsErrorOccurred+0xd6>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002766:	d02a      	beq.n	80027be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b20      	cmp	r3, #32
 800276c:	d027      	beq.n	80027be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800277c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800277e:	f7ff f907 	bl	8001990 <HAL_GetTick>
 8002782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002784:	e01b      	b.n	80027be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002786:	f7ff f903 	bl	8001990 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b19      	cmp	r3, #25
 8002792:	d914      	bls.n	80027be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1dc      	bne.n	8002786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d003      	beq.n	80027e2 <I2C_IsErrorOccurred+0xfa>
 80027da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d09d      	beq.n	800271e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800286e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01c      	beq.n	80028b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fddc 	bl	8002434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <I2C_IsErrorOccurred+0x1d4>)
 8002888:	400b      	ands	r3, r1
 800288a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3728      	adds	r7, #40	; 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	fe00e800 	.word	0xfe00e800

080028c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	4613      	mov	r3, r2
 80028d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028d8:	7a7b      	ldrb	r3, [r7, #9]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	0d5b      	lsrs	r3, r3, #21
 80028fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <I2C_TransferConfig+0x60>)
 8002900:	430b      	orrs	r3, r1
 8002902:	43db      	mvns	r3, r3
 8002904:	ea02 0103 	and.w	r1, r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	03ff63ff 	.word	0x03ff63ff

08002924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	d138      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002944:	2302      	movs	r3, #2
 8002946:	e032      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d139      	bne.n	8002a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029da:	2302      	movs	r3, #2
 80029dc:	e033      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2224      	movs	r2, #36	; 0x24
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	d130      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d038      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2232      	movs	r2, #50	; 0x32
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab4:	e002      	b.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f2      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d110      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e00f      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d007      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40007000 	.word	0x40007000
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e3c6      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2e:	4ba1      	ldr	r3, [pc, #644]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b38:	4b9e      	ldr	r3, [pc, #632]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80e4 	beq.w	8002d18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x4a>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	f040 808b 	bne.w	8002c74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 8087 	bne.w	8002c74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b66:	4b93      	ldr	r3, [pc, #588]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x62>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e39e      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_RCC_OscConfig+0x7c>
 8002b8e:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_OscConfig+0x88>
 8002b98:	4b86      	ldr	r3, [pc, #536]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d223      	bcs.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd53 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e37f      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbc:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7c      	ldr	r2, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4977      	ldr	r1, [pc, #476]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4972      	ldr	r1, [pc, #456]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
 8002bee:	e025      	b.n	8002c3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf0:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6f      	ldr	r2, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	496a      	ldr	r1, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0e:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	4965      	ldr	r1, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd13 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e33f      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3c:	f000 fc48 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	495a      	ldr	r1, [pc, #360]	; (8002db8 <HAL_RCC_OscConfig+0x29c>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x2a0>)
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x2a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fe45 	bl	80018f0 <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d052      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	e323      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d032      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fe82 	bl	8001990 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe7e 	bl	8001990 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e30c      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a40      	ldr	r2, [pc, #256]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	493b      	ldr	r1, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e01a      	b.n	8002d18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe4f 	bl	8001990 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fe4b 	bl	8001990 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e2d9      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x1da>
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d074      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x21a>
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d064      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d160      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e2b6      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x24a>
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e01d      	b.n	8002da2 <HAL_RCC_OscConfig+0x286>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x26e>
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x286>
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fdf1 	bl	8001990 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db0:	e011      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	0800973c 	.word	0x0800973c
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fde4 	bl	8001990 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e272      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd6:	4baf      	ldr	r3, [pc, #700]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2a8>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fdd4 	bl	8001990 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fdd0 	bl	8001990 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e25e      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfe:	4ba5      	ldr	r3, [pc, #660]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x2d0>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d060      	beq.n	8002edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x310>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d116      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_OscConfig+0x328>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e23b      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b93      	ldr	r3, [pc, #588]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	4990      	ldr	r1, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e58:	e040      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d023      	beq.n	8002eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e62:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8b      	ldr	r2, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fd8f 	bl	8001990 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fd8b 	bl	8001990 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e219      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	497c      	ldr	r1, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e018      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fd6b 	bl	8001990 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fd67 	bl	8001990 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1f5      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d03c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fd46 	bl	8001990 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fd42 	bl	8001990 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1d0      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x3ec>
 8002f28:	e01b      	b.n	8002f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd29 	bl	8001990 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fd25 	bl	8001990 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1b3      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a6 	beq.w	80030bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	4a43      	ldr	r2, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fcec 	bl	8001990 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe fce8 	bl	8001990 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e176      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4d8>
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff2:	e024      	b.n	800303e <HAL_RCC_OscConfig+0x522>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d110      	bne.n	800301e <HAL_RCC_OscConfig+0x502>
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a24      	ldr	r2, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301c:	e00f      	b.n	800303e <HAL_RCC_OscConfig+0x522>
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	4a17      	ldr	r2, [pc, #92]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003036:	f023 0304 	bic.w	r3, r3, #4
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe fca3 	bl	8001990 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fc9f 	bl	8001990 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e12b      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ed      	beq.n	800304e <HAL_RCC_OscConfig+0x532>
 8003072:	e01a      	b.n	80030aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fc8c 	bl	8001990 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fc88 	bl	8001990 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d906      	bls.n	800309c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e114      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309c:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e8      	bne.n	800307c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a83      	ldr	r2, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80fa 	beq.w	80032ba <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	f040 80d0 	bne.w	8003270 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030d0:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d130      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	3b01      	subs	r3, #1
 80030f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d127      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11f      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	2a07      	cmp	r2, #7
 8003112:	bf14      	ite	ne
 8003114:	2201      	movne	r2, #1
 8003116:	2200      	moveq	r2, #0
 8003118:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800311a:	4293      	cmp	r3, r2
 800311c:	d113      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	3b01      	subs	r3, #1
 8003140:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d06e      	beq.n	8003224 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d069      	beq.n	8003220 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800314c:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0a9      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003168:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a55      	ldr	r2, [pc, #340]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800316e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003172:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003174:	f7fe fc0c 	bl	8001990 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fc08 	bl	8001990 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e096      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x7ac>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031aa:	3a01      	subs	r2, #1
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b4:	0212      	lsls	r2, r2, #8
 80031b6:	4311      	orrs	r1, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031bc:	0852      	lsrs	r2, r2, #1
 80031be:	3a01      	subs	r2, #1
 80031c0:	0552      	lsls	r2, r2, #21
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0652      	lsls	r2, r2, #25
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031d4:	0912      	lsrs	r2, r2, #4
 80031d6:	0452      	lsls	r2, r2, #17
 80031d8:	430a      	orrs	r2, r1
 80031da:	493a      	ldr	r1, [pc, #232]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f8:	f7fe fbca 	bl	8001990 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fbc6 	bl	8001990 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e054      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321e:	e04c      	b.n	80032ba <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e04b      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d144      	bne.n	80032ba <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003246:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003248:	f7fe fba2 	bl	8001990 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fe fb9e 	bl	8001990 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e02c      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x734>
 800326e:	e024      	b.n	80032ba <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d01f      	beq.n	80032b6 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800327c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe fb85 	bl	8001990 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe fb81 	bl	8001990 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e00f      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4905      	ldr	r1, [pc, #20]	; (80032c4 <HAL_RCC_OscConfig+0x7a8>)
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_RCC_OscConfig+0x7b0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
 80032b4:	e001      	b.n	80032ba <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	f99d808c 	.word	0xf99d808c
 80032cc:	feeefffc 	.word	0xfeeefffc

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0e7      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b75      	ldr	r3, [pc, #468]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4970      	ldr	r1, [pc, #448]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0cf      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4960      	ldr	r1, [pc, #384]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04c      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b5a      	ldr	r3, [pc, #360]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0a6      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e09a      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e08e      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e086      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4943      	ldr	r1, [pc, #268]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe faea 	bl	8001990 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fae6 	bl	8001990 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e06e      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003400:	429a      	cmp	r2, r3
 8003402:	d208      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	492b      	ldr	r1, [pc, #172]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d210      	bcs.n	8003446 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 0207 	bic.w	r2, r3, #7
 800342c:	4923      	ldr	r1, [pc, #140]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e036      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4918      	ldr	r1, [pc, #96]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4910      	ldr	r1, [pc, #64]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003484:	f000 f824 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	490b      	ldr	r1, [pc, #44]	; (80034c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1f8>)
 80034a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_ClockConfig+0x1fc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fa21 	bl	80018f0 <HAL_InitTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	0800973c 	.word	0x0800973c
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	20000010 	.word	0x20000010

080034d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x34>
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d121      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d11e      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003510:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e005      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003520:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800352c:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d102      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e004      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d101      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003556:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d134      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0xa6>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d003      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0xac>
 8003574:	e005      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003578:	617b      	str	r3, [r7, #20]
      break;
 800357a:	e005      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800357e:	617b      	str	r3, [r7, #20]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	617b      	str	r3, [r7, #20]
      break;
 8003586:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	3301      	adds	r3, #1
 8003594:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	fb02 f203 	mul.w	r2, r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	0e5b      	lsrs	r3, r3, #25
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	3301      	adds	r3, #1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035c8:	69bb      	ldr	r3, [r7, #24]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08009754 	.word	0x08009754
 80035e0:	00f42400 	.word	0x00f42400
 80035e4:	007a1200 	.word	0x007a1200

080035e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000000c 	.word	0x2000000c

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003604:	f7ff fff0 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	0800974c 	.word	0x0800974c

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003630:	f7ff ffda 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0adb      	lsrs	r3, r3, #11
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	0800974c 	.word	0x0800974c

08003658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003664:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003670:	f7ff f9f0 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 8003674:	6178      	str	r0, [r7, #20]
 8003676:	e014      	b.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	4a24      	ldr	r2, [pc, #144]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003690:	f7ff f9e0 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 8003694:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a8:	d10b      	bne.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d919      	bls.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2ba0      	cmp	r3, #160	; 0xa0
 80036b4:	d902      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036b6:	2302      	movs	r3, #2
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e013      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036bc:	2301      	movs	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	e010      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d902      	bls.n	80036ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036c8:	2303      	movs	r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e00a      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d102      	bne.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036d4:	2302      	movs	r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e004      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d101      	bne.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036e0:	2301      	movs	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0207 	bic.w	r2, r3, #7
 80036ec:	4909      	ldr	r1, [pc, #36]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	40022000 	.word	0x40022000

08003718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003720:	2300      	movs	r3, #0
 8003722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003724:	2300      	movs	r3, #0
 8003726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003730:	2b00      	cmp	r3, #0
 8003732:	d041      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003738:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800373c:	d02a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800373e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003742:	d824      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800374a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800374e:	d81e      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003758:	d010      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800375a:	e018      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800375c:	4b86      	ldr	r3, [pc, #536]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a85      	ldr	r2, [pc, #532]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003768:	e015      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fabb 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800377a:	e00c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3320      	adds	r3, #32
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fba6 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	74fb      	strb	r3, [r7, #19]
      break;
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800379c:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037aa:	4973      	ldr	r1, [pc, #460]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037b2:	e001      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d041      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037cc:	d02a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037d2:	d824      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037de:	d81e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e8:	d010      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ea:	e018      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ec:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a61      	ldr	r2, [pc, #388]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037f8:	e015      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa73 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800380a:	e00c      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3320      	adds	r3, #32
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb5e 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	74fb      	strb	r3, [r7, #19]
      break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800382c:	4b52      	ldr	r3, [pc, #328]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800383a:	494f      	ldr	r1, [pc, #316]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a0 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a40      	ldr	r2, [pc, #256]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3a      	ldr	r2, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003898:	f7fe f87a 	bl	8001990 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800389e:	e009      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe f876 	bl	8001990 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	74fb      	strb	r3, [r7, #19]
        break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d15c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d019      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a20      	ldr	r2, [pc, #128]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe f835 	bl	8001990 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00b      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe f831 	bl	8001990 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	74fb      	strb	r3, [r7, #19]
            break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ec      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003984:	7c7b      	ldrb	r3, [r7, #17]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398a:	4b9e      	ldr	r3, [pc, #632]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	4a9d      	ldr	r2, [pc, #628]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	4994      	ldr	r1, [pc, #592]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c4:	4b8f      	ldr	r3, [pc, #572]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 020c 	bic.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	498c      	ldr	r1, [pc, #560]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e6:	4b87      	ldr	r3, [pc, #540]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4983      	ldr	r1, [pc, #524]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a08:	4b7e      	ldr	r3, [pc, #504]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	497b      	ldr	r1, [pc, #492]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	4972      	ldr	r1, [pc, #456]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4c:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	496a      	ldr	r1, [pc, #424]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	4961      	ldr	r1, [pc, #388]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a90:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	4959      	ldr	r1, [pc, #356]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab2:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	4950      	ldr	r1, [pc, #320]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	4948      	ldr	r1, [pc, #288]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	493f      	ldr	r1, [pc, #252]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d028      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b26:	4937      	ldr	r1, [pc, #220]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	e011      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8c8 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d028      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	491f      	ldr	r1, [pc, #124]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba0:	60d3      	str	r3, [r2, #12]
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f899 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02b      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	4908      	ldr	r1, [pc, #32]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf2:	d109      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a02      	ldr	r2, [pc, #8]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
 8003c00:	e014      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f867 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c46:	4928      	ldr	r1, [pc, #160]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f844 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d014      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	74bb      	strb	r3, [r7, #18]
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3320      	adds	r3, #32
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f925 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cde:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfa:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10d      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d1e:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d047      	beq.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e044      	b.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d018      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0x86>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d825      	bhi.n	8003d90 <RCCEx_PLLSAI1_Config+0xa4>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x62>
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d009      	beq.n	8003d60 <RCCEx_PLLSAI1_Config+0x74>
 8003d4c:	e020      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d4e:	4b60      	ldr	r3, [pc, #384]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11d      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5e:	e01a      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d60:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e013      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d72:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d7e:	4b54      	ldr	r3, [pc, #336]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d8e:	e006      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e004      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4944      	ldr	r1, [pc, #272]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d17d      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fddc 	bl	8001990 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dda:	e009      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ddc:	f7fd fdd8 	bl	8001990 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	73fb      	strb	r3, [r7, #15]
        break;
 8003dee:	e005      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d160      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	0912      	lsrs	r2, r2, #4
 8003e20:	0452      	lsls	r2, r2, #17
 8003e22:	430a      	orrs	r2, r1
 8003e24:	492a      	ldr	r1, [pc, #168]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	610b      	str	r3, [r1, #16]
 8003e2a:	e027      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d112      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	0211      	lsls	r1, r2, #8
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6912      	ldr	r2, [r2, #16]
 8003e48:	0852      	lsrs	r2, r2, #1
 8003e4a:	3a01      	subs	r2, #1
 8003e4c:	0552      	lsls	r2, r2, #21
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	610b      	str	r3, [r1, #16]
 8003e56:	e011      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6892      	ldr	r2, [r2, #8]
 8003e68:	0211      	lsls	r1, r2, #8
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6952      	ldr	r2, [r2, #20]
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0652      	lsls	r2, r2, #25
 8003e74:	430a      	orrs	r2, r1
 8003e76:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fd82 	bl	8001990 <HAL_GetTick>
 8003e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e90:	f7fd fd7e 	bl	8001990 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d902      	bls.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea2:	e005      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
       ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f06:	4b61      	ldr	r3, [pc, #388]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
       ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d047      	beq.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e044      	b.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d018      	beq.n	8003f5a <RCCEx_PLLSAI2_Config+0x86>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d825      	bhi.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <RCCEx_PLLSAI2_Config+0x62>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d009      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0x74>
 8003f34:	e020      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f36:	4b55      	ldr	r3, [pc, #340]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f46:	e01a      	b.n	8003f7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e013      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f5a:	4b4c      	ldr	r3, [pc, #304]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f76:	e006      	b.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e004      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4939      	ldr	r1, [pc, #228]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d167      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fb0:	4b36      	ldr	r3, [pc, #216]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fce8 	bl	8001990 <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc4:	f7fd fce4 	bl	8001990 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ef      	bne.n	8003fc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14a      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d111      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6892      	ldr	r2, [r2, #8]
 8004000:	0211      	lsls	r1, r2, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0912      	lsrs	r2, r2, #4
 8004008:	0452      	lsls	r2, r2, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	491f      	ldr	r1, [pc, #124]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	614b      	str	r3, [r1, #20]
 8004012:	e011      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800401c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	0211      	lsls	r1, r2, #8
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6912      	ldr	r2, [r2, #16]
 800402a:	0852      	lsrs	r2, r2, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	0652      	lsls	r2, r2, #25
 8004030:	430a      	orrs	r2, r1
 8004032:	4916      	ldr	r1, [pc, #88]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd fca4 	bl	8001990 <HAL_GetTick>
 8004048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800404a:	e009      	b.n	8004060 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800404c:	f7fd fca0 	bl	8001990 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	73fb      	strb	r3, [r7, #15]
          break;
 800405e:	e005      	b.n	800406c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ef      	beq.n	800404c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4904      	ldr	r1, [pc, #16]	; (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000

08004090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e095      	b.n	80041ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d009      	beq.n	80040c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
 80040ba:	e005      	b.n	80040c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd faaa 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004108:	d902      	bls.n	8004110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e002      	b.n	8004116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800411e:	d007      	beq.n	8004130 <HAL_SPI_Init+0xa0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	ea42 0103 	orr.w	r1, r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f003 0204 	and.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041ac:	ea42 0103 	orr.w	r1, r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b088      	sub	sp, #32
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_SPI_Transmit+0x22>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e158      	b.n	80044aa <HAL_SPI_Transmit+0x2d4>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004200:	f7fd fbc6 	bl	8001990 <HAL_GetTick>
 8004204:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	77fb      	strb	r3, [r7, #31]
    goto error;
 800421a:	e13d      	b.n	8004498 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Transmit+0x52>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800422c:	e134      	b.n	8004498 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2203      	movs	r2, #3
 8004232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d10f      	bne.n	800429a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d007      	beq.n	80042b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c0:	d94b      	bls.n	800435a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Transmit+0xfa>
 80042ca:	8afb      	ldrh	r3, [r7, #22]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d13e      	bne.n	800434e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042f4:	e02b      	b.n	800434e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d112      	bne.n	800432a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004328:	e011      	b.n	800434e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432a:	f7fd fb31 	bl	8001990 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d803      	bhi.n	8004342 <HAL_SPI_Transmit+0x16c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d102      	bne.n	8004348 <HAL_SPI_Transmit+0x172>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800434c:	e0a4      	b.n	8004498 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ce      	bne.n	80042f6 <HAL_SPI_Transmit+0x120>
 8004358:	e07c      	b.n	8004454 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0x192>
 8004362:	8afb      	ldrh	r3, [r7, #22]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d170      	bne.n	800444a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d912      	bls.n	8004398 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b02      	subs	r3, #2
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004396:	e058      	b.n	800444a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043be:	e044      	b.n	800444a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d12b      	bne.n	8004426 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d912      	bls.n	80043fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b02      	subs	r3, #2
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043fc:	e025      	b.n	800444a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004424:	e011      	b.n	800444a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004426:	f7fd fab3 	bl	8001990 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d803      	bhi.n	800443e <HAL_SPI_Transmit+0x268>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d102      	bne.n	8004444 <HAL_SPI_Transmit+0x26e>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004448:	e026      	b.n	8004498 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1b5      	bne.n	80043c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fb5b 	bl	8004b14 <SPI_EndRxTxTransaction>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e000      	b.n	8004498 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08a      	sub	sp, #40	; 0x28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044c0:	2301      	movs	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x26>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e1fb      	b.n	80048d0 <HAL_SPI_TransmitReceive+0x41e>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e0:	f7fd fa56 	bl	8001990 <HAL_GetTick>
 80044e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044fc:	7efb      	ldrb	r3, [r7, #27]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d00e      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x6e>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004508:	d106      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x66>
 8004512:	7efb      	ldrb	r3, [r7, #27]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d003      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004518:	2302      	movs	r3, #2
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800451e:	e1cd      	b.n	80048bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x80>
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004538:	e1c0      	b.n	80048bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b04      	cmp	r3, #4
 8004544:	d003      	beq.n	800454e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2205      	movs	r2, #5
 800454a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	887a      	ldrh	r2, [r7, #2]
 8004566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	887a      	ldrh	r2, [r7, #2]
 800457a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004590:	d802      	bhi.n	8004598 <HAL_SPI_TransmitReceive+0xe6>
 8004592:	8a3b      	ldrh	r3, [r7, #16]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d908      	bls.n	80045aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	e007      	b.n	80045ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d007      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e0:	d97c      	bls.n	80046dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x13e>
 80045ea:	8a7b      	ldrh	r3, [r7, #18]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d169      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	881a      	ldrh	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004614:	e056      	b.n	80046c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11b      	bne.n	800465c <HAL_SPI_TransmitReceive+0x1aa>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_SPI_TransmitReceive+0x1aa>
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	2b01      	cmp	r3, #1
 8004632:	d113      	bne.n	800465c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d11c      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x1f2>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	b292      	uxth	r2, r2
 8004682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046a4:	f7fd f974 	bl	8001990 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d807      	bhi.n	80046c4 <HAL_SPI_TransmitReceive+0x212>
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d003      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046c2:	e0fb      	b.n	80048bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1a3      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x164>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d19d      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x164>
 80046da:	e0df      	b.n	800489c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x23a>
 80046e4:	8a7b      	ldrh	r3, [r7, #18]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f040 80cb 	bne.w	8004882 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d912      	bls.n	800471c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b02      	subs	r3, #2
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800471a:	e0b2      	b.n	8004882 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004742:	e09e      	b.n	8004882 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d134      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x30a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02f      	beq.n	80047bc <HAL_SPI_TransmitReceive+0x30a>
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	2b01      	cmp	r3, #1
 8004760:	d12c      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d912      	bls.n	8004792 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b02      	subs	r3, #2
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004790:	e012      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d148      	bne.n	800485c <HAL_SPI_TransmitReceive+0x3aa>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d042      	beq.n	800485c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d923      	bls.n	800482a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	b292      	uxth	r2, r2
 80047ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	1c9a      	adds	r2, r3, #2
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b02      	subs	r3, #2
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d81f      	bhi.n	8004858 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	e016      	b.n	8004858 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f103 020c 	add.w	r2, r3, #12
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004858:	2301      	movs	r3, #1
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800485c:	f7fd f898 	bl	8001990 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004868:	429a      	cmp	r2, r3
 800486a:	d803      	bhi.n	8004874 <HAL_SPI_TransmitReceive+0x3c2>
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d102      	bne.n	800487a <HAL_SPI_TransmitReceive+0x3c8>
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004880:	e01c      	b.n	80048bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f af5b 	bne.w	8004744 <HAL_SPI_TransmitReceive+0x292>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f af54 	bne.w	8004744 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f937 	bl	8004b14 <SPI_EndRxTxTransaction>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
 80048b8:	e000      	b.n	80048bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048e8:	f7fd f852 	bl	8001990 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048f8:	f7fd f84a 	bl	8001990 <HAL_GetTick>
 80048fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	e054      	b.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d050      	beq.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004918:	f7fd f83a 	bl	8001990 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	d902      	bls.n	800492e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d13d      	bne.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d111      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d004      	beq.n	800495c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d107      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004974:	d10f      	bne.n	8004996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e017      	b.n	80049da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d19b      	bne.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049fa:	f7fc ffc9 	bl	8001990 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a0a:	f7fc ffc1 	bl	8001990 <HAL_GetTick>
 8004a0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	0d1b      	lsrs	r3, r3, #20
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a30:	e060      	b.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a38:	d107      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d050      	beq.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a52:	f7fc ff9d 	bl	8001990 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d902      	bls.n	8004a68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13d      	bne.n	8004ae4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a80:	d111      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d004      	beq.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d107      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	d10f      	bne.n	8004ad0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ace:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d196      	bne.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ff5b 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e027      	b.n	8004b98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff fec0 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	f043 0220 	orr.w	r2, r3, #32
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e014      	b.n	8004b98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff ff34 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e000      	b.n	8004b98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e040      	b.n	8004c34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fd7c 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8c0 	bl	8004d64 <UART_SetConfig>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e022      	b.n	8004c34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fb3e 	bl	8005278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fbc5 	bl	80053bc <UART_CheckIdleState>
 8004c32:	4603      	mov	r3, r0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	f040 8082 	bne.w	8004d5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_Transmit+0x26>
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07a      	b.n	8004d5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Transmit+0x38>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e073      	b.n	8004d5c <HAL_UART_Transmit+0x120>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2221      	movs	r2, #33	; 0x21
 8004c88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fe81 	bl	8001990 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d108      	bne.n	8004cbc <HAL_UART_Transmit+0x80>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e003      	b.n	8004cc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ccc:	e02d      	b.n	8004d2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fbb8 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e039      	b.n	8004d5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3302      	adds	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e008      	b.n	8004d18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3301      	adds	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1cb      	bne.n	8004cce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fb84 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e005      	b.n	8004d5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4bad      	ldr	r3, [pc, #692]	; (8005044 <UART_SetConfig+0x2e0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	69f9      	ldr	r1, [r7, #28]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4aa2      	ldr	r2, [pc, #648]	; (8005048 <UART_SetConfig+0x2e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a99      	ldr	r2, [pc, #612]	; (800504c <UART_SetConfig+0x2e8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d121      	bne.n	8004e2e <UART_SetConfig+0xca>
 8004dea:	4b99      	ldr	r3, [pc, #612]	; (8005050 <UART_SetConfig+0x2ec>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d817      	bhi.n	8004e28 <UART_SetConfig+0xc4>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x9c>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e1d 	.word	0x08004e1d
 8004e08:	08004e17 	.word	0x08004e17
 8004e0c:	08004e23 	.word	0x08004e23
 8004e10:	2301      	movs	r3, #1
 8004e12:	76fb      	strb	r3, [r7, #27]
 8004e14:	e0e7      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e16:	2302      	movs	r3, #2
 8004e18:	76fb      	strb	r3, [r7, #27]
 8004e1a:	e0e4      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	76fb      	strb	r3, [r7, #27]
 8004e20:	e0e1      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e22:	2308      	movs	r3, #8
 8004e24:	76fb      	strb	r3, [r7, #27]
 8004e26:	e0de      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	76fb      	strb	r3, [r7, #27]
 8004e2c:	e0db      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a88      	ldr	r2, [pc, #544]	; (8005054 <UART_SetConfig+0x2f0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d132      	bne.n	8004e9e <UART_SetConfig+0x13a>
 8004e38:	4b85      	ldr	r3, [pc, #532]	; (8005050 <UART_SetConfig+0x2ec>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d828      	bhi.n	8004e98 <UART_SetConfig+0x134>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0xe8>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004e99 	.word	0x08004e99
 8004e54:	08004e99 	.word	0x08004e99
 8004e58:	08004e99 	.word	0x08004e99
 8004e5c:	08004e8d 	.word	0x08004e8d
 8004e60:	08004e99 	.word	0x08004e99
 8004e64:	08004e99 	.word	0x08004e99
 8004e68:	08004e99 	.word	0x08004e99
 8004e6c:	08004e87 	.word	0x08004e87
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004e99 	.word	0x08004e99
 8004e7c:	08004e93 	.word	0x08004e93
 8004e80:	2300      	movs	r3, #0
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e0af      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e86:	2302      	movs	r3, #2
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e0ac      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e0a9      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e92:	2308      	movs	r3, #8
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e0a6      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	e0a3      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6d      	ldr	r2, [pc, #436]	; (8005058 <UART_SetConfig+0x2f4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d120      	bne.n	8004eea <UART_SetConfig+0x186>
 8004ea8:	4b69      	ldr	r3, [pc, #420]	; (8005050 <UART_SetConfig+0x2ec>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb2:	2b30      	cmp	r3, #48	; 0x30
 8004eb4:	d013      	beq.n	8004ede <UART_SetConfig+0x17a>
 8004eb6:	2b30      	cmp	r3, #48	; 0x30
 8004eb8:	d814      	bhi.n	8004ee4 <UART_SetConfig+0x180>
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d009      	beq.n	8004ed2 <UART_SetConfig+0x16e>
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d810      	bhi.n	8004ee4 <UART_SetConfig+0x180>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <UART_SetConfig+0x168>
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d006      	beq.n	8004ed8 <UART_SetConfig+0x174>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x180>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	e089      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	76fb      	strb	r3, [r7, #27]
 8004ed6:	e086      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	76fb      	strb	r3, [r7, #27]
 8004edc:	e083      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	76fb      	strb	r3, [r7, #27]
 8004ee2:	e080      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	76fb      	strb	r3, [r7, #27]
 8004ee8:	e07d      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5b      	ldr	r2, [pc, #364]	; (800505c <UART_SetConfig+0x2f8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d120      	bne.n	8004f36 <UART_SetConfig+0x1d2>
 8004ef4:	4b56      	ldr	r3, [pc, #344]	; (8005050 <UART_SetConfig+0x2ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004efe:	2bc0      	cmp	r3, #192	; 0xc0
 8004f00:	d013      	beq.n	8004f2a <UART_SetConfig+0x1c6>
 8004f02:	2bc0      	cmp	r3, #192	; 0xc0
 8004f04:	d814      	bhi.n	8004f30 <UART_SetConfig+0x1cc>
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0x1ba>
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d810      	bhi.n	8004f30 <UART_SetConfig+0x1cc>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <UART_SetConfig+0x1b4>
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d006      	beq.n	8004f24 <UART_SetConfig+0x1c0>
 8004f16:	e00b      	b.n	8004f30 <UART_SetConfig+0x1cc>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	76fb      	strb	r3, [r7, #27]
 8004f1c:	e063      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	76fb      	strb	r3, [r7, #27]
 8004f22:	e060      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f24:	2304      	movs	r3, #4
 8004f26:	76fb      	strb	r3, [r7, #27]
 8004f28:	e05d      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	76fb      	strb	r3, [r7, #27]
 8004f2e:	e05a      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f30:	2310      	movs	r3, #16
 8004f32:	76fb      	strb	r3, [r7, #27]
 8004f34:	e057      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a49      	ldr	r2, [pc, #292]	; (8005060 <UART_SetConfig+0x2fc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d125      	bne.n	8004f8c <UART_SetConfig+0x228>
 8004f40:	4b43      	ldr	r3, [pc, #268]	; (8005050 <UART_SetConfig+0x2ec>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d017      	beq.n	8004f80 <UART_SetConfig+0x21c>
 8004f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f54:	d817      	bhi.n	8004f86 <UART_SetConfig+0x222>
 8004f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5a:	d00b      	beq.n	8004f74 <UART_SetConfig+0x210>
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f60:	d811      	bhi.n	8004f86 <UART_SetConfig+0x222>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <UART_SetConfig+0x20a>
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	d006      	beq.n	8004f7a <UART_SetConfig+0x216>
 8004f6c:	e00b      	b.n	8004f86 <UART_SetConfig+0x222>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	76fb      	strb	r3, [r7, #27]
 8004f72:	e038      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f74:	2302      	movs	r3, #2
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e035      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	76fb      	strb	r3, [r7, #27]
 8004f7e:	e032      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f80:	2308      	movs	r3, #8
 8004f82:	76fb      	strb	r3, [r7, #27]
 8004f84:	e02f      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f86:	2310      	movs	r3, #16
 8004f88:	76fb      	strb	r3, [r7, #27]
 8004f8a:	e02c      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <UART_SetConfig+0x2e4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d125      	bne.n	8004fe2 <UART_SetConfig+0x27e>
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <UART_SetConfig+0x2ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa4:	d017      	beq.n	8004fd6 <UART_SetConfig+0x272>
 8004fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004faa:	d817      	bhi.n	8004fdc <UART_SetConfig+0x278>
 8004fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb0:	d00b      	beq.n	8004fca <UART_SetConfig+0x266>
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	d811      	bhi.n	8004fdc <UART_SetConfig+0x278>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <UART_SetConfig+0x260>
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc0:	d006      	beq.n	8004fd0 <UART_SetConfig+0x26c>
 8004fc2:	e00b      	b.n	8004fdc <UART_SetConfig+0x278>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	76fb      	strb	r3, [r7, #27]
 8004fc8:	e00d      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	76fb      	strb	r3, [r7, #27]
 8004fce:	e00a      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e007      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	76fb      	strb	r3, [r7, #27]
 8004fda:	e004      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e001      	b.n	8004fe6 <UART_SetConfig+0x282>
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <UART_SetConfig+0x2e4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	f040 8087 	bne.w	8005100 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff2:	7efb      	ldrb	r3, [r7, #27]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d837      	bhi.n	8005068 <UART_SetConfig+0x304>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x29c>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005025 	.word	0x08005025
 8005004:	08005069 	.word	0x08005069
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005069 	.word	0x08005069
 8005010:	08005033 	.word	0x08005033
 8005014:	08005069 	.word	0x08005069
 8005018:	08005069 	.word	0x08005069
 800501c:	08005069 	.word	0x08005069
 8005020:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005024:	f7fe faec 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005028:	6178      	str	r0, [r7, #20]
        break;
 800502a:	e022      	b.n	8005072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <UART_SetConfig+0x300>)
 800502e:	617b      	str	r3, [r7, #20]
        break;
 8005030:	e01f      	b.n	8005072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe fa4d 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8005036:	6178      	str	r0, [r7, #20]
        break;
 8005038:	e01b      	b.n	8005072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503e:	617b      	str	r3, [r7, #20]
        break;
 8005040:	e017      	b.n	8005072 <UART_SetConfig+0x30e>
 8005042:	bf00      	nop
 8005044:	efff69f3 	.word	0xefff69f3
 8005048:	40008000 	.word	0x40008000
 800504c:	40013800 	.word	0x40013800
 8005050:	40021000 	.word	0x40021000
 8005054:	40004400 	.word	0x40004400
 8005058:	40004800 	.word	0x40004800
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40005000 	.word	0x40005000
 8005064:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	76bb      	strb	r3, [r7, #26]
        break;
 8005070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80f1 	beq.w	800525c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	429a      	cmp	r2, r3
 8005088:	d305      	bcc.n	8005096 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d902      	bls.n	800509c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	76bb      	strb	r3, [r7, #26]
 800509a:	e0df      	b.n	800525c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4618      	mov	r0, r3
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	020b      	lsls	r3, r1, #8
 80050ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050b2:	0202      	lsls	r2, r0, #8
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	6849      	ldr	r1, [r1, #4]
 80050b8:	0849      	lsrs	r1, r1, #1
 80050ba:	4608      	mov	r0, r1
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	1814      	adds	r4, r2, r0
 80050c2:	eb43 0501 	adc.w	r5, r3, r1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb f8d4 	bl	8000280 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4613      	mov	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e6:	d308      	bcc.n	80050fa <UART_SetConfig+0x396>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ee:	d204      	bcs.n	80050fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e0b0      	b.n	800525c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	76bb      	strb	r3, [r7, #26]
 80050fe:	e0ad      	b.n	800525c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d15b      	bne.n	80051c2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800510a:	7efb      	ldrb	r3, [r7, #27]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d828      	bhi.n	8005162 <UART_SetConfig+0x3fe>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0x3b4>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	08005163 	.word	0x08005163
 8005128:	08005153 	.word	0x08005153
 800512c:	08005163 	.word	0x08005163
 8005130:	08005163 	.word	0x08005163
 8005134:	08005163 	.word	0x08005163
 8005138:	0800515b 	.word	0x0800515b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800513c:	f7fe fa60 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005140:	6178      	str	r0, [r7, #20]
        break;
 8005142:	e013      	b.n	800516c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005144:	f7fe fa72 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005148:	6178      	str	r0, [r7, #20]
        break;
 800514a:	e00f      	b.n	800516c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <UART_SetConfig+0x510>)
 800514e:	617b      	str	r3, [r7, #20]
        break;
 8005150:	e00c      	b.n	800516c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005152:	f7fe f9bd 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8005156:	6178      	str	r0, [r7, #20]
        break;
 8005158:	e008      	b.n	800516c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515e:	617b      	str	r3, [r7, #20]
        break;
 8005160:	e004      	b.n	800516c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	76bb      	strb	r3, [r7, #26]
        break;
 800516a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d074      	beq.n	800525c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005a      	lsls	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d916      	bls.n	80051bc <UART_SetConfig+0x458>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d212      	bcs.n	80051bc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f023 030f 	bic.w	r3, r3, #15
 800519e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	89fa      	ldrh	r2, [r7, #14]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	e04f      	b.n	800525c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	76bb      	strb	r3, [r7, #26]
 80051c0:	e04c      	b.n	800525c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d828      	bhi.n	800521a <UART_SetConfig+0x4b6>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x46c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fe fa04 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80051f8:	6178      	str	r0, [r7, #20]
        break;
 80051fa:	e013      	b.n	8005224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fe fa16 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005200:	6178      	str	r0, [r7, #20]
        break;
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <UART_SetConfig+0x510>)
 8005206:	617b      	str	r3, [r7, #20]
        break;
 8005208:	e00c      	b.n	8005224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fe f961 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800520e:	6178      	str	r0, [r7, #20]
        break;
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	617b      	str	r3, [r7, #20]
        break;
 8005218:	e004      	b.n	8005224 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	76bb      	strb	r3, [r7, #26]
        break;
 8005222:	bf00      	nop
    }

    if (pclk != 0U)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	085a      	lsrs	r2, r3, #1
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	441a      	add	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d909      	bls.n	8005258 <UART_SetConfig+0x4f4>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524a:	d205      	bcs.n	8005258 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	e001      	b.n	800525c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005268:	7ebb      	ldrb	r3, [r7, #26]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bdb0      	pop	{r4, r5, r7, pc}
 8005272:	bf00      	nop
 8005274:	00f42400 	.word	0x00f42400

08005278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01a      	beq.n	800538e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005376:	d10a      	bne.n	800538e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053cc:	f7fc fae0 	bl	8001990 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d10e      	bne.n	80053fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f82d 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e023      	b.n	8005446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d10e      	bne.n	800542a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f817 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e00d      	b.n	8005446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b09c      	sub	sp, #112	; 0x70
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545e:	e0a5      	b.n	80055ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	f000 80a1 	beq.w	80055ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fc fa91 	bl	8001990 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <UART_WaitOnFlagUntilTimeout+0x32>
 800547a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547c:	2b00      	cmp	r3, #0
 800547e:	d13e      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005494:	667b      	str	r3, [r7, #100]	; 0x64
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e6      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	663b      	str	r3, [r7, #96]	; 0x60
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80054d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e067      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d04f      	beq.n	80055ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d147      	bne.n	80055ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005524:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800553a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
 8005546:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800554a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	613b      	str	r3, [r7, #16]
   return(result);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3308      	adds	r3, #8
 8005576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005578:	623a      	str	r2, [r7, #32]
 800557a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	69f9      	ldr	r1, [r7, #28]
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	61bb      	str	r3, [r7, #24]
   return(result);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e010      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69da      	ldr	r2, [r3, #28]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	f43f af4a 	beq.w	8005460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3770      	adds	r7, #112	; 0x70
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055dc:	4904      	ldr	r1, [pc, #16]	; (80055f0 <MX_FATFS_Init+0x18>)
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <MX_FATFS_Init+0x1c>)
 80055e0:	f003 fb04 	bl	8008bec <FATFS_LinkDriver>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <MX_FATFS_Init+0x20>)
 80055ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20002d0c 	.word	0x20002d0c
 80055f4:	20000018 	.word	0x20000018
 80055f8:	20002d10 	.word	0x20002d10

080055fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fb f963 	bl	80008e4 <SD_disk_initialize>
 800561e:	4603      	mov	r3, r0
 8005620:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	4603      	mov	r3, r0
 8005632:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fb fa40 	bl	8000abc <SD_disk_status>
  /* USER CODE END STATUS */
}
 800563c:	bf00      	nop
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005656:	7bf8      	ldrb	r0, [r7, #15]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	f7fb fa43 	bl	8000ae8 <SD_disk_read>
 8005662:	4603      	mov	r3, r0
 8005664:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800567e:	7bf8      	ldrb	r0, [r7, #15]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	f7fb fa99 	bl	8000bbc <SD_disk_write>
 800568a:	4603      	mov	r3, r0
 800568c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	603a      	str	r2, [r7, #0]
 80056a0:	71fb      	strb	r3, [r7, #7]
 80056a2:	460b      	mov	r3, r1
 80056a4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	79b9      	ldrb	r1, [r7, #6]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fb fb09 	bl	8000cc4 <SD_disk_ioctl>
 80056b2:	4603      	mov	r3, r0
 80056b4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <disk_status+0x30>)
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	4905      	ldr	r1, [pc, #20]	; (80056f0 <disk_status+0x30>)
 80056da:	440a      	add	r2, r1
 80056dc:	7a12      	ldrb	r2, [r2, #8]
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	200002dc 	.word	0x200002dc

080056f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <disk_initialize+0x48>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d111      	bne.n	8005730 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	4a0b      	ldr	r2, [pc, #44]	; (800573c <disk_initialize+0x48>)
 8005710:	2101      	movs	r1, #1
 8005712:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <disk_initialize+0x48>)
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	79fa      	ldrb	r2, [r7, #7]
 8005722:	4906      	ldr	r1, [pc, #24]	; (800573c <disk_initialize+0x48>)
 8005724:	440a      	add	r2, r1
 8005726:	7a12      	ldrb	r2, [r2, #8]
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200002dc 	.word	0x200002dc

08005740 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <disk_read+0x3c>)
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	689c      	ldr	r4, [r3, #8]
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <disk_read+0x3c>)
 8005760:	4413      	add	r3, r2
 8005762:	7a18      	ldrb	r0, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	47a0      	blx	r4
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	200002dc 	.word	0x200002dc

08005780 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <disk_write+0x3c>)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68dc      	ldr	r4, [r3, #12]
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	4a07      	ldr	r2, [pc, #28]	; (80057bc <disk_write+0x3c>)
 80057a0:	4413      	add	r3, r2
 80057a2:	7a18      	ldrb	r0, [r3, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	47a0      	blx	r4
 80057ac:	4603      	mov	r3, r0
 80057ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd90      	pop	{r4, r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200002dc 	.word	0x200002dc

080057c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	603a      	str	r2, [r7, #0]
 80057ca:	71fb      	strb	r3, [r7, #7]
 80057cc:	460b      	mov	r3, r1
 80057ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <disk_ioctl+0x38>)
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	79fa      	ldrb	r2, [r7, #7]
 80057de:	4906      	ldr	r1, [pc, #24]	; (80057f8 <disk_ioctl+0x38>)
 80057e0:	440a      	add	r2, r1
 80057e2:	7a10      	ldrb	r0, [r2, #8]
 80057e4:	79b9      	ldrb	r1, [r7, #6]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4798      	blx	r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200002dc 	.word	0x200002dc

080057fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3301      	adds	r3, #1
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800580c:	89fb      	ldrh	r3, [r7, #14]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	b21a      	sxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b21b      	sxth	r3, r3
 8005818:	4313      	orrs	r3, r2
 800581a:	b21b      	sxth	r3, r3
 800581c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800581e:	89fb      	ldrh	r3, [r7, #14]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3303      	adds	r3, #3
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	3202      	adds	r2, #2
 8005844:	7812      	ldrb	r2, [r2, #0]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	3201      	adds	r2, #1
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
	return rv;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	887a      	ldrh	r2, [r7, #2]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	1c53      	adds	r3, r2, #1
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	6179      	str	r1, [r7, #20]
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3b01      	subs	r3, #1
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f1      	bne.n	800591a <mem_cpy+0x1a>
	}
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	617a      	str	r2, [r7, #20]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3b01      	subs	r3, #1
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f3      	bne.n	8005952 <mem_set+0x10>
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	61ba      	str	r2, [r7, #24]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <mem_cmp+0x40>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0eb      	beq.n	8005990 <mem_cmp+0x18>

	return r;
 80059b8:	697b      	ldr	r3, [r7, #20]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059d0:	e002      	b.n	80059d8 <chk_chr+0x12>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3301      	adds	r3, #1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <chk_chr+0x26>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d1f2      	bne.n	80059d2 <chk_chr+0xc>
	return *str;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	781b      	ldrb	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e029      	b.n	8005a64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a10:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <chk_lock+0xb4>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4413      	add	r3, r2
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01d      	beq.n	8005a5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a1e:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <chk_lock+0xb4>)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4413      	add	r3, r2
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d116      	bne.n	8005a5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <chk_lock+0xb4>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	4413      	add	r3, r2
 8005a38:	3304      	adds	r3, #4
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d10c      	bne.n	8005a5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <chk_lock+0xb4>)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d102      	bne.n	8005a5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a58:	e007      	b.n	8005a6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d9d2      	bls.n	8005a10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d109      	bne.n	8005a84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <chk_lock+0x80>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d101      	bne.n	8005a80 <chk_lock+0x84>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e010      	b.n	8005aa2 <chk_lock+0xa6>
 8005a80:	2312      	movs	r3, #18
 8005a82:	e00e      	b.n	8005aa2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <chk_lock+0xa0>
 8005a8a:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <chk_lock+0xb4>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	4413      	add	r3, r2
 8005a92:	330c      	adds	r3, #12
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9a:	d101      	bne.n	8005aa0 <chk_lock+0xa4>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	e000      	b.n	8005aa2 <chk_lock+0xa6>
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	200000bc 	.word	0x200000bc

08005ab4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	e002      	b.n	8005ac6 <enq_lock+0x12>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d806      	bhi.n	8005ada <enq_lock+0x26>
 8005acc:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <enq_lock+0x40>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	4413      	add	r3, r2
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f2      	bne.n	8005ac0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	200000bc 	.word	0x200000bc

08005af8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	e01f      	b.n	8005b48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b08:	4a41      	ldr	r2, [pc, #260]	; (8005c10 <inc_lock+0x118>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	4413      	add	r3, r2
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d113      	bne.n	8005b42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b1a:	4a3d      	ldr	r2, [pc, #244]	; (8005c10 <inc_lock+0x118>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d109      	bne.n	8005b42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b2e:	4a38      	ldr	r2, [pc, #224]	; (8005c10 <inc_lock+0x118>)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	4413      	add	r3, r2
 8005b36:	3308      	adds	r3, #8
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d006      	beq.n	8005b50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d9dc      	bls.n	8005b08 <inc_lock+0x10>
 8005b4e:	e000      	b.n	8005b52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d132      	bne.n	8005bbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e002      	b.n	8005b64 <inc_lock+0x6c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d806      	bhi.n	8005b78 <inc_lock+0x80>
 8005b6a:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <inc_lock+0x118>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	4413      	add	r3, r2
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f2      	bne.n	8005b5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d101      	bne.n	8005b82 <inc_lock+0x8a>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e040      	b.n	8005c04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4922      	ldr	r1, [pc, #136]	; (8005c10 <inc_lock+0x118>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	440b      	add	r3, r1
 8005b8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	491e      	ldr	r1, [pc, #120]	; (8005c10 <inc_lock+0x118>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	491a      	ldr	r1, [pc, #104]	; (8005c10 <inc_lock+0x118>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	440b      	add	r3, r1
 8005bac:	3308      	adds	r3, #8
 8005bae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005bb0:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <inc_lock+0x118>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	4413      	add	r3, r2
 8005bb8:	330c      	adds	r3, #12
 8005bba:	2200      	movs	r2, #0
 8005bbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <inc_lock+0xe0>
 8005bc4:	4a12      	ldr	r2, [pc, #72]	; (8005c10 <inc_lock+0x118>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	4413      	add	r3, r2
 8005bcc:	330c      	adds	r3, #12
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <inc_lock+0xe0>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e015      	b.n	8005c04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <inc_lock+0xf8>
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <inc_lock+0x118>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4413      	add	r3, r2
 8005be6:	330c      	adds	r3, #12
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	e001      	b.n	8005bf4 <inc_lock+0xfc>
 8005bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf4:	4906      	ldr	r1, [pc, #24]	; (8005c10 <inc_lock+0x118>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	440b      	add	r3, r1
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	200000bc 	.word	0x200000bc

08005c14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d825      	bhi.n	8005c74 <dec_lock+0x60>
		n = Files[i].ctr;
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <dec_lock+0x74>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4413      	add	r3, r2
 8005c30:	330c      	adds	r3, #12
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3c:	d101      	bne.n	8005c42 <dec_lock+0x2e>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <dec_lock+0x3a>
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <dec_lock+0x74>)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	4413      	add	r3, r2
 8005c56:	330c      	adds	r3, #12
 8005c58:	89fa      	ldrh	r2, [r7, #14]
 8005c5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c5c:	89fb      	ldrh	r3, [r7, #14]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <dec_lock+0x5a>
 8005c62:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <dec_lock+0x74>)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	4413      	add	r3, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	737b      	strb	r3, [r7, #13]
 8005c72:	e001      	b.n	8005c78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c74:	2302      	movs	r3, #2
 8005c76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c78:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	200000bc 	.word	0x200000bc

08005c8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e010      	b.n	8005cbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <clear_lock+0x44>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d105      	bne.n	8005cb6 <clear_lock+0x2a>
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <clear_lock+0x44>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d9eb      	bls.n	8005c9a <clear_lock+0xe>
	}
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	200000bc 	.word	0x200000bc

08005cd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d034      	beq.n	8005d52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7858      	ldrb	r0, [r3, #1]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f7ff fd40 	bl	8005780 <disk_write>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
 8005d0a:	e022      	b.n	8005d52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d217      	bcs.n	8005d52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	789b      	ldrb	r3, [r3, #2]
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	e010      	b.n	8005d4c <sync_window+0x78>
					wsect += fs->fsize;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7858      	ldrb	r0, [r3, #1]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d3e:	2301      	movs	r3, #1
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	f7ff fd1d 	bl	8005780 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d8eb      	bhi.n	8005d2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d01b      	beq.n	8005dac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff ffad 	bl	8005cd4 <sync_window>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d113      	bne.n	8005dac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7858      	ldrb	r0, [r3, #1]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d8e:	2301      	movs	r3, #1
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	f7ff fcd5 	bl	8005740 <disk_read>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff87 	bl	8005cd4 <sync_window>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d159      	bne.n	8005e84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d149      	bne.n	8005e6c <sync_fs+0xb4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d145      	bne.n	8005e6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	899b      	ldrh	r3, [r3, #12]
 8005dea:	461a      	mov	r2, r3
 8005dec:	2100      	movs	r1, #0
 8005dee:	f7ff fda8 	bl	8005942 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3338      	adds	r3, #56	; 0x38
 8005df6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dfa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fd37 	bl	8005872 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3338      	adds	r3, #56	; 0x38
 8005e08:	4921      	ldr	r1, [pc, #132]	; (8005e90 <sync_fs+0xd8>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fd4c 	bl	80058a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3338      	adds	r3, #56	; 0x38
 8005e14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e18:	491e      	ldr	r1, [pc, #120]	; (8005e94 <sync_fs+0xdc>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fd44 	bl	80058a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3338      	adds	r3, #56	; 0x38
 8005e24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7ff fd3a 	bl	80058a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3338      	adds	r3, #56	; 0x38
 8005e38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7ff fd30 	bl	80058a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e60:	2301      	movs	r3, #1
 8005e62:	f7ff fc8d 	bl	8005780 <disk_write>
			fs->fsi_flag = 0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fca3 	bl	80057c0 <disk_ioctl>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <sync_fs+0xcc>
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	41615252 	.word	0x41615252
 8005e94:	61417272 	.word	0x61417272

08005e98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3b02      	subs	r3, #2
 8005ea6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	3b02      	subs	r3, #2
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d301      	bcc.n	8005eb8 <clust2sect+0x20>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e008      	b.n	8005eca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	895b      	ldrh	r3, [r3, #10]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	fb03 f202 	mul.w	r2, r3, r2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	4413      	add	r3, r2
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d904      	bls.n	8005ef6 <get_fat+0x20>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e0bb      	b.n	8006074 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	f000 8083 	beq.w	8006012 <get_fat+0x13c>
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	f300 80a7 	bgt.w	8006060 <get_fat+0x18a>
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d002      	beq.n	8005f1c <get_fat+0x46>
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d056      	beq.n	8005fc8 <get_fat+0xf2>
 8005f1a:	e0a1      	b.n	8006060 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	899b      	ldrh	r3, [r3, #12]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6938      	ldr	r0, [r7, #16]
 8005f40:	f7ff ff0c 	bl	8005d5c <move_window>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 808d 	bne.w	8006066 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	60fa      	str	r2, [r7, #12]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	8992      	ldrh	r2, [r2, #12]
 8005f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f5a:	fb02 f201 	mul.w	r2, r2, r1
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	899b      	ldrh	r3, [r3, #12]
 8005f72:	4619      	mov	r1, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f7ff feec 	bl	8005d5c <move_window>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d16f      	bne.n	800606a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	899b      	ldrh	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f96:	fb02 f201 	mul.w	r2, r2, r1
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <get_fat+0xe8>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	091b      	lsrs	r3, r3, #4
 8005fbc:	e002      	b.n	8005fc4 <get_fat+0xee>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc4:	617b      	str	r3, [r7, #20]
			break;
 8005fc6:	e055      	b.n	8006074 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	899b      	ldrh	r3, [r3, #12]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fdc:	4413      	add	r3, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6938      	ldr	r0, [r7, #16]
 8005fe2:	f7ff febb 	bl	8005d5c <move_window>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d140      	bne.n	800606e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	8992      	ldrh	r2, [r2, #12]
 8005ffa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ffe:	fb02 f200 	mul.w	r2, r2, r0
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	440b      	add	r3, r1
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fbf8 	bl	80057fc <ld_word>
 800600c:	4603      	mov	r3, r0
 800600e:	617b      	str	r3, [r7, #20]
			break;
 8006010:	e030      	b.n	8006074 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	899b      	ldrh	r3, [r3, #12]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	b29b      	uxth	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	fbb3 f3f1 	udiv	r3, r3, r1
 8006026:	4413      	add	r3, r2
 8006028:	4619      	mov	r1, r3
 800602a:	6938      	ldr	r0, [r7, #16]
 800602c:	f7ff fe96 	bl	8005d5c <move_window>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11d      	bne.n	8006072 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	8992      	ldrh	r2, [r2, #12]
 8006044:	fbb3 f0f2 	udiv	r0, r3, r2
 8006048:	fb02 f200 	mul.w	r2, r2, r0
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	440b      	add	r3, r1
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fbeb 	bl	800582c <ld_dword>
 8006056:	4603      	mov	r3, r0
 8006058:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800605c:	617b      	str	r3, [r7, #20]
			break;
 800605e:	e009      	b.n	8006074 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e006      	b.n	8006074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006066:	bf00      	nop
 8006068:	e004      	b.n	8006074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006072:	bf00      	nop
		}
	}

	return val;
 8006074:	697b      	ldr	r3, [r7, #20]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800607e:	b590      	push	{r4, r7, lr}
 8006080:	b089      	sub	sp, #36	; 0x24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800608a:	2302      	movs	r3, #2
 800608c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b01      	cmp	r3, #1
 8006092:	f240 8102 	bls.w	800629a <put_fat+0x21c>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	f080 80fc 	bcs.w	800629a <put_fat+0x21c>
		switch (fs->fs_type) {
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	f000 80b6 	beq.w	8006218 <put_fat+0x19a>
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	f300 80fd 	bgt.w	80062ac <put_fat+0x22e>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d003      	beq.n	80060be <put_fat+0x40>
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	f000 8083 	beq.w	80061c2 <put_fat+0x144>
 80060bc:	e0f6      	b.n	80062ac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	085b      	lsrs	r3, r3, #1
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4413      	add	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	899b      	ldrh	r3, [r3, #12]
 80060d4:	4619      	mov	r1, r3
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80060dc:	4413      	add	r3, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff fe3b 	bl	8005d5c <move_window>
 80060e6:	4603      	mov	r3, r0
 80060e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 80d6 	bne.w	800629e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	8992      	ldrh	r2, [r2, #12]
 8006102:	fbb3 f0f2 	udiv	r0, r3, r2
 8006106:	fb02 f200 	mul.w	r2, r2, r0
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	440b      	add	r3, r1
 800610e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00d      	beq.n	8006136 <put_fat+0xb8>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b25b      	sxtb	r3, r3
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	b25a      	sxtb	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	b25b      	sxtb	r3, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	b25b      	sxtb	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e001      	b.n	800613a <put_fat+0xbc>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	899b      	ldrh	r3, [r3, #12]
 800614c:	4619      	mov	r1, r3
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	fbb3 f3f1 	udiv	r3, r3, r1
 8006154:	4413      	add	r3, r2
 8006156:	4619      	mov	r1, r3
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff fdff 	bl	8005d5c <move_window>
 800615e:	4603      	mov	r3, r0
 8006160:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006162:	7ffb      	ldrb	r3, [r7, #31]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 809c 	bne.w	80062a2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	899b      	ldrh	r3, [r3, #12]
 8006174:	461a      	mov	r2, r3
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	fbb3 f0f2 	udiv	r0, r3, r2
 800617c:	fb02 f200 	mul.w	r2, r2, r0
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	440b      	add	r3, r1
 8006184:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <put_fat+0x11a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e00e      	b.n	80061b6 <put_fat+0x138>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b25b      	sxtb	r3, r3
 800619e:	f023 030f 	bic.w	r3, r3, #15
 80061a2:	b25a      	sxtb	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	70da      	strb	r2, [r3, #3]
			break;
 80061c0:	e074      	b.n	80062ac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	899b      	ldrh	r3, [r3, #12]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4619      	mov	r1, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061d6:	4413      	add	r3, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fdbe 	bl	8005d5c <move_window>
 80061e0:	4603      	mov	r3, r0
 80061e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d15d      	bne.n	80062a6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	8992      	ldrh	r2, [r2, #12]
 80061f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80061fc:	fb02 f200 	mul.w	r2, r2, r0
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	440b      	add	r3, r1
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	b292      	uxth	r2, r2
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fb31 	bl	8005872 <st_word>
			fs->wflag = 1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	70da      	strb	r2, [r3, #3]
			break;
 8006216:	e049      	b.n	80062ac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	899b      	ldrh	r3, [r3, #12]
 8006220:	089b      	lsrs	r3, r3, #2
 8006222:	b29b      	uxth	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	fbb3 f3f1 	udiv	r3, r3, r1
 800622c:	4413      	add	r3, r2
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fd93 	bl	8005d5c <move_window>
 8006236:	4603      	mov	r3, r0
 8006238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d134      	bne.n	80062aa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	8992      	ldrh	r2, [r2, #12]
 8006254:	fbb3 f0f2 	udiv	r0, r3, r2
 8006258:	fb02 f200 	mul.w	r2, r2, r0
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	440b      	add	r3, r1
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fae3 	bl	800582c <ld_dword>
 8006266:	4603      	mov	r3, r0
 8006268:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800626c:	4323      	orrs	r3, r4
 800626e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	8992      	ldrh	r2, [r2, #12]
 800627e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006282:	fb02 f200 	mul.w	r2, r2, r0
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	440b      	add	r3, r1
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fb0b 	bl	80058a8 <st_dword>
			fs->wflag = 1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	70da      	strb	r2, [r3, #3]
			break;
 8006298:	e008      	b.n	80062ac <put_fat+0x22e>
		}
	}
 800629a:	bf00      	nop
 800629c:	e006      	b.n	80062ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800629e:	bf00      	nop
 80062a0:	e004      	b.n	80062ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80062a2:	bf00      	nop
 80062a4:	e002      	b.n	80062ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80062aa:	bf00      	nop
	return res;
 80062ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd90      	pop	{r4, r7, pc}

080062b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d904      	bls.n	80062dc <remove_chain+0x26>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d301      	bcc.n	80062e0 <remove_chain+0x2a>
 80062dc:	2302      	movs	r3, #2
 80062de:	e04b      	b.n	8006378 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	69b8      	ldr	r0, [r7, #24]
 80062ee:	f7ff fec6 	bl	800607e <put_fat>
 80062f2:	4603      	mov	r3, r0
 80062f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <remove_chain+0x4a>
 80062fc:	7ffb      	ldrb	r3, [r7, #31]
 80062fe:	e03b      	b.n	8006378 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fde7 	bl	8005ed6 <get_fat>
 8006308:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d031      	beq.n	8006374 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <remove_chain+0x64>
 8006316:	2302      	movs	r3, #2
 8006318:	e02e      	b.n	8006378 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d101      	bne.n	8006326 <remove_chain+0x70>
 8006322:	2301      	movs	r3, #1
 8006324:	e028      	b.n	8006378 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006326:	2200      	movs	r2, #0
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	69b8      	ldr	r0, [r7, #24]
 800632c:	f7ff fea7 	bl	800607e <put_fat>
 8006330:	4603      	mov	r3, r0
 8006332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006334:	7ffb      	ldrb	r3, [r7, #31]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <remove_chain+0x88>
 800633a:	7ffb      	ldrb	r3, [r7, #31]
 800633c:	e01c      	b.n	8006378 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	3b02      	subs	r3, #2
 8006348:	429a      	cmp	r2, r3
 800634a:	d20b      	bcs.n	8006364 <remove_chain+0xae>
			fs->free_clst++;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3c6      	bcc.n	8006300 <remove_chain+0x4a>
 8006372:	e000      	b.n	8006376 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006374:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <create_chain+0x2c>
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d31b      	bcc.n	80063e4 <create_chain+0x64>
 80063ac:	2301      	movs	r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	e018      	b.n	80063e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fd8e 	bl	8005ed6 <get_fat>
 80063ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d801      	bhi.n	80063c6 <create_chain+0x46>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e070      	b.n	80064a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d101      	bne.n	80063d2 <create_chain+0x52>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e06a      	b.n	80064a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d201      	bcs.n	80063e0 <create_chain+0x60>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	e063      	b.n	80064a8 <create_chain+0x128>
		scl = clst;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d307      	bcc.n	8006408 <create_chain+0x88>
				ncl = 2;
 80063f8:	2302      	movs	r3, #2
 80063fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d901      	bls.n	8006408 <create_chain+0x88>
 8006404:	2300      	movs	r3, #0
 8006406:	e04f      	b.n	80064a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006408:	69f9      	ldr	r1, [r7, #28]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fd63 	bl	8005ed6 <get_fat>
 8006410:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00e      	beq.n	8006436 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d003      	beq.n	8006426 <create_chain+0xa6>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d101      	bne.n	800642a <create_chain+0xaa>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	e03e      	b.n	80064a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	429a      	cmp	r2, r3
 8006430:	d1da      	bne.n	80063e8 <create_chain+0x68>
 8006432:	2300      	movs	r3, #0
 8006434:	e038      	b.n	80064a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006436:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	6938      	ldr	r0, [r7, #16]
 8006440:	f7ff fe1d 	bl	800607e <put_fat>
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <create_chain+0xe2>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6938      	ldr	r0, [r7, #16]
 800645a:	f7ff fe10 	bl	800607e <put_fat>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d116      	bne.n	8006496 <create_chain+0x116>
		fs->last_clst = ncl;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	3b02      	subs	r3, #2
 8006478:	429a      	cmp	r2, r3
 800647a:	d804      	bhi.n	8006486 <create_chain+0x106>
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	791b      	ldrb	r3, [r3, #4]
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	711a      	strb	r2, [r3, #4]
 8006494:	e007      	b.n	80064a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <create_chain+0x122>
 800649c:	f04f 33ff 	mov.w	r3, #4294967295
 80064a0:	e000      	b.n	80064a4 <create_chain+0x124>
 80064a2:	2301      	movs	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	3304      	adds	r3, #4
 80064c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	899b      	ldrh	r3, [r3, #12]
 80064cc:	461a      	mov	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	8952      	ldrh	r2, [r2, #10]
 80064d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	613a      	str	r2, [r7, #16]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <clmt_clust+0x42>
 80064ee:	2300      	movs	r3, #0
 80064f0:	e010      	b.n	8006514 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d307      	bcc.n	800650a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3304      	adds	r3, #4
 8006506:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006508:	e7e9      	b.n	80064de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800650a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	4413      	add	r3, r2
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006536:	d204      	bcs.n	8006542 <dir_sdi+0x22>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006542:	2302      	movs	r3, #2
 8006544:	e071      	b.n	800662a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <dir_sdi+0x46>
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d902      	bls.n	8006566 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	8912      	ldrh	r2, [r2, #8]
 8006574:	4293      	cmp	r3, r2
 8006576:	d301      	bcc.n	800657c <dir_sdi+0x5c>
 8006578:	2302      	movs	r3, #2
 800657a:	e056      	b.n	800662a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	61da      	str	r2, [r3, #28]
 8006584:	e02d      	b.n	80065e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	895b      	ldrh	r3, [r3, #10]
 800658a:	461a      	mov	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	899b      	ldrh	r3, [r3, #12]
 8006590:	fb03 f302 	mul.w	r3, r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006596:	e019      	b.n	80065cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6979      	ldr	r1, [r7, #20]
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fc9a 	bl	8005ed6 <get_fat>
 80065a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d101      	bne.n	80065b0 <dir_sdi+0x90>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e03c      	b.n	800662a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d904      	bls.n	80065c0 <dir_sdi+0xa0>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d301      	bcc.n	80065c4 <dir_sdi+0xa4>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e032      	b.n	800662a <dir_sdi+0x10a>
			ofs -= csz;
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d2e1      	bcs.n	8006598 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80065d4:	6979      	ldr	r1, [r7, #20]
 80065d6:	6938      	ldr	r0, [r7, #16]
 80065d8:	f7ff fc5e 	bl	8005e98 <clust2sect>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <dir_sdi+0xd4>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e01a      	b.n	800662a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	899b      	ldrh	r3, [r3, #12]
 80065fc:	4619      	mov	r1, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	fbb3 f3f1 	udiv	r3, r3, r1
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	899b      	ldrh	r3, [r3, #12]
 8006614:	461a      	mov	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	fbb3 f0f2 	udiv	r0, r3, r2
 800661c:	fb02 f200 	mul.w	r2, r2, r0
 8006620:	1a9b      	subs	r3, r3, r2
 8006622:	18ca      	adds	r2, r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	3320      	adds	r3, #32
 8006648:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <dir_next+0x28>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006658:	d301      	bcc.n	800665e <dir_next+0x2c>
 800665a:	2304      	movs	r3, #4
 800665c:	e0bb      	b.n	80067d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	899b      	ldrh	r3, [r3, #12]
 8006662:	461a      	mov	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	fbb3 f1f2 	udiv	r1, r3, r2
 800666a:	fb02 f201 	mul.w	r2, r2, r1
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 809d 	bne.w	80067b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	8912      	ldrh	r2, [r2, #8]
 8006690:	4293      	cmp	r3, r2
 8006692:	f0c0 808d 	bcc.w	80067b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	61da      	str	r2, [r3, #28]
 800669c:	2304      	movs	r3, #4
 800669e:	e09a      	b.n	80067d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	899b      	ldrh	r3, [r3, #12]
 80066a4:	461a      	mov	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	8952      	ldrh	r2, [r2, #10]
 80066b0:	3a01      	subs	r2, #1
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d17b      	bne.n	80067b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7ff fc08 	bl	8005ed6 <get_fat>
 80066c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d801      	bhi.n	80066d2 <dir_next+0xa0>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e081      	b.n	80067d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d101      	bne.n	80066de <dir_next+0xac>
 80066da:	2301      	movs	r3, #1
 80066dc:	e07b      	b.n	80067d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d359      	bcc.n	800679c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	61da      	str	r2, [r3, #28]
 80066f4:	2304      	movs	r3, #4
 80066f6:	e06e      	b.n	80067d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7ff fe3d 	bl	8006380 <create_chain>
 8006706:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <dir_next+0xe0>
 800670e:	2307      	movs	r3, #7
 8006710:	e061      	b.n	80067d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <dir_next+0xea>
 8006718:	2302      	movs	r3, #2
 800671a:	e05c      	b.n	80067d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d101      	bne.n	8006728 <dir_next+0xf6>
 8006724:	2301      	movs	r3, #1
 8006726:	e056      	b.n	80067d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff fad3 	bl	8005cd4 <sync_window>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <dir_next+0x106>
 8006734:	2301      	movs	r3, #1
 8006736:	e04e      	b.n	80067d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	899b      	ldrh	r3, [r3, #12]
 8006742:	461a      	mov	r2, r3
 8006744:	2100      	movs	r1, #0
 8006746:	f7ff f8fc 	bl	8005942 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fba1 	bl	8005e98 <clust2sect>
 8006756:	4602      	mov	r2, r0
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	635a      	str	r2, [r3, #52]	; 0x34
 800675c:	e012      	b.n	8006784 <dir_next+0x152>
						fs->wflag = 1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fab5 	bl	8005cd4 <sync_window>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <dir_next+0x142>
 8006770:	2301      	movs	r3, #1
 8006772:	e030      	b.n	80067d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	635a      	str	r2, [r3, #52]	; 0x34
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	895b      	ldrh	r3, [r3, #10]
 8006788:	461a      	mov	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4293      	cmp	r3, r2
 800678e:	d3e6      	bcc.n	800675e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067a2:	6979      	ldr	r1, [r7, #20]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff fb77 	bl	8005e98 <clust2sect>
 80067aa:	4602      	mov	r2, r0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	899b      	ldrh	r3, [r3, #12]
 80067c0:	461a      	mov	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80067c8:	fb02 f200 	mul.w	r2, r2, r0
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	18ca      	adds	r2, r1, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fe95 	bl	8006520 <dir_sdi>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d12b      	bne.n	8006858 <dir_alloc+0x7a>
		n = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	4619      	mov	r1, r3
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff faa6 	bl	8005d5c <move_window>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11d      	bne.n	8006856 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2be5      	cmp	r3, #229	; 0xe5
 8006822:	d004      	beq.n	800682e <dir_alloc+0x50>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d102      	bne.n	8006842 <dir_alloc+0x64>
 800683c:	e00c      	b.n	8006858 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006842:	2101      	movs	r1, #1
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fef4 	bl	8006632 <dir_next>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0d7      	beq.n	8006804 <dir_alloc+0x26>
 8006854:	e000      	b.n	8006858 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006856:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d101      	bne.n	8006862 <dir_alloc+0x84>
 800685e:	2307      	movs	r3, #7
 8006860:	75fb      	strb	r3, [r7, #23]
	return res;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	331a      	adds	r3, #26
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe ffbe 	bl	80057fc <ld_word>
 8006880:	4603      	mov	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d109      	bne.n	80068a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	4618      	mov	r0, r3
 8006892:	f7fe ffb3 	bl	80057fc <ld_word>
 8006896:	4603      	mov	r3, r0
 8006898:	041b      	lsls	r3, r3, #16
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	331a      	adds	r3, #26
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	b292      	uxth	r2, r2
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe ffd6 	bl	8005872 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d109      	bne.n	80068e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f103 0214 	add.w	r2, r3, #20
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fe ffc8 	bl	8005872 <st_word>
	}
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	331a      	adds	r3, #26
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe ff7e 	bl	80057fc <ld_word>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <cmp_lfn+0x1e>
 8006906:	2300      	movs	r3, #0
 8006908:	e059      	b.n	80069be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006912:	1e5a      	subs	r2, r3, #1
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006920:	2301      	movs	r3, #1
 8006922:	81fb      	strh	r3, [r7, #14]
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e033      	b.n	8006992 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800692a:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <cmp_lfn+0xdc>)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	4413      	add	r3, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe ff5f 	bl	80057fc <ld_word>
 800693e:	4603      	mov	r3, r0
 8006940:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006942:	89fb      	ldrh	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01a      	beq.n	800697e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2bfe      	cmp	r3, #254	; 0xfe
 800694c:	d812      	bhi.n	8006974 <cmp_lfn+0x88>
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	4618      	mov	r0, r3
 8006952:	f002 f997 	bl	8008c84 <ff_wtoupper>
 8006956:	4603      	mov	r3, r0
 8006958:	461c      	mov	r4, r3
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	617a      	str	r2, [r7, #20]
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f002 f98b 	bl	8008c84 <ff_wtoupper>
 800696e:	4603      	mov	r3, r0
 8006970:	429c      	cmp	r4, r3
 8006972:	d001      	beq.n	8006978 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006974:	2300      	movs	r3, #0
 8006976:	e022      	b.n	80069be <cmp_lfn+0xd2>
			}
			wc = uc;
 8006978:	89bb      	ldrh	r3, [r7, #12]
 800697a:	81fb      	strh	r3, [r7, #14]
 800697c:	e006      	b.n	800698c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800697e:	89bb      	ldrh	r3, [r7, #12]
 8006980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006984:	4293      	cmp	r3, r2
 8006986:	d001      	beq.n	800698c <cmp_lfn+0xa0>
 8006988:	2300      	movs	r3, #0
 800698a:	e018      	b.n	80069be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d9c8      	bls.n	800692a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <cmp_lfn+0xd0>
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <cmp_lfn+0xd0>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <cmp_lfn+0xd0>
 80069b8:	2300      	movs	r3, #0
 80069ba:	e000      	b.n	80069be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80069bc:	2301      	movs	r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08009804 	.word	0x08009804

080069cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	460b      	mov	r3, r1
 80069dc:	71fb      	strb	r3, [r7, #7]
 80069de:	4613      	mov	r3, r2
 80069e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	330d      	adds	r3, #13
 80069e6:	79ba      	ldrb	r2, [r7, #6]
 80069e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	330b      	adds	r3, #11
 80069ee:	220f      	movs	r2, #15
 80069f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	330c      	adds	r3, #12
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	331a      	adds	r3, #26
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe ff36 	bl	8005872 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	82fb      	strh	r3, [r7, #22]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a1e:	8afb      	ldrh	r3, [r7, #22]
 8006a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d007      	beq.n	8006a38 <put_lfn+0x6c>
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	61fa      	str	r2, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a38:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <put_lfn+0xcc>)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	8afa      	ldrh	r2, [r7, #22]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe ff11 	bl	8005872 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a50:	8afb      	ldrh	r3, [r7, #22]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <put_lfn+0x90>
 8006a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	d9da      	bls.n	8006a1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a68:	8afb      	ldrh	r3, [r7, #22]
 8006a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d006      	beq.n	8006a80 <put_lfn+0xb4>
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <put_lfn+0xbc>
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	79fa      	ldrb	r2, [r7, #7]
 8006a8c:	701a      	strb	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	08009804 	.word	0x08009804

08006a9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	; 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006aaa:	220b      	movs	r2, #11
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7fe ff26 	bl	8005900 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d92b      	bls.n	8006b12 <gen_numname+0x76>
		sr = seq;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006abe:	e022      	b.n	8006b06 <gen_numname+0x6a>
			wc = *lfn++;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006aca:	2300      	movs	r3, #0
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ace:	e017      	b.n	8006b00 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	005a      	lsls	r2, r3, #1
 8006ad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <gen_numname+0x5e>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006af4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006af8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	3301      	adds	r3, #1
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d9e4      	bls.n	8006ad0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1d8      	bne.n	8006ac0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b12:	2307      	movs	r3, #7
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	3330      	adds	r3, #48	; 0x30
 8006b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b2a:	2b39      	cmp	r3, #57	; 0x39
 8006b2c:	d904      	bls.n	8006b38 <gen_numname+0x9c>
 8006b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b32:	3307      	adds	r3, #7
 8006b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	1e5a      	subs	r2, r3, #1
 8006b3c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b42:	4413      	add	r3, r2
 8006b44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b48:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1de      	bne.n	8006b16 <gen_numname+0x7a>
	ns[i] = '~';
 8006b58:	f107 0214 	add.w	r2, r7, #20
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	4413      	add	r3, r2
 8006b60:	227e      	movs	r2, #126	; 0x7e
 8006b62:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	e002      	b.n	8006b70 <gen_numname+0xd4>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d205      	bcs.n	8006b84 <gen_numname+0xe8>
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	4413      	add	r3, r2
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d1f2      	bne.n	8006b6a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b07      	cmp	r3, #7
 8006b88:	d808      	bhi.n	8006b9c <gen_numname+0x100>
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b94:	4413      	add	r3, r2
 8006b96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b9a:	e000      	b.n	8006b9e <gen_numname+0x102>
 8006b9c:	2120      	movs	r1, #32
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	460a      	mov	r2, r1
 8006baa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2b07      	cmp	r3, #7
 8006bb0:	d9e8      	bls.n	8006b84 <gen_numname+0xe8>
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	3730      	adds	r7, #48	; 0x30
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006bc8:	230b      	movs	r3, #11
 8006bca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	0852      	lsrs	r2, r2, #1
 8006bd2:	01db      	lsls	r3, r3, #7
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	1c59      	adds	r1, r3, #1
 8006bdc:	6079      	str	r1, [r7, #4]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ed      	bne.n	8006bcc <sum_sfn+0x10>
	return sum;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fc86 	bl	8006520 <dir_sdi>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <dir_find+0x24>
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	e0a9      	b.n	8006d76 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c22:	23ff      	movs	r3, #255	; 0xff
 8006c24:	753b      	strb	r3, [r7, #20]
 8006c26:	7d3b      	ldrb	r3, [r7, #20]
 8006c28:	757b      	strb	r3, [r7, #21]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6938      	ldr	r0, [r7, #16]
 8006c3a:	f7ff f88f 	bl	8005d5c <move_window>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8090 	bne.w	8006d6a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c52:	7dbb      	ldrb	r3, [r7, #22]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <dir_find+0x60>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	75fb      	strb	r3, [r7, #23]
 8006c5c:	e08a      	b.n	8006d74 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	330b      	adds	r3, #11
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	2be5      	cmp	r3, #229	; 0xe5
 8006c76:	d007      	beq.n	8006c88 <dir_find+0x8a>
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <dir_find+0x98>
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b0f      	cmp	r3, #15
 8006c86:	d006      	beq.n	8006c96 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c88:	23ff      	movs	r3, #255	; 0xff
 8006c8a:	757b      	strb	r3, [r7, #21]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
 8006c94:	e05e      	b.n	8006d54 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b0f      	cmp	r3, #15
 8006c9a:	d136      	bne.n	8006d0a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d154      	bne.n	8006d54 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	7b5b      	ldrb	r3, [r3, #13]
 8006cba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006cbc:	7dbb      	ldrb	r3, [r7, #22]
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	75bb      	strb	r3, [r7, #22]
 8006cc4:	7dbb      	ldrb	r3, [r7, #22]
 8006cc6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695a      	ldr	r2, [r3, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006cd0:	7dba      	ldrb	r2, [r7, #22]
 8006cd2:	7d7b      	ldrb	r3, [r7, #21]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d115      	bne.n	8006d04 <dir_find+0x106>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	330d      	adds	r3, #13
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	7d3a      	ldrb	r2, [r7, #20]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d10e      	bne.n	8006d04 <dir_find+0x106>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff fdfb 	bl	80068ec <cmp_lfn>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <dir_find+0x106>
 8006cfc:	7d7b      	ldrb	r3, [r7, #21]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e000      	b.n	8006d06 <dir_find+0x108>
 8006d04:	23ff      	movs	r3, #255	; 0xff
 8006d06:	757b      	strb	r3, [r7, #21]
 8006d08:	e024      	b.n	8006d54 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d0a:	7d7b      	ldrb	r3, [r7, #21]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <dir_find+0x126>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff ff51 	bl	8006bbc <sum_sfn>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	7d3b      	ldrb	r3, [r7, #20]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d024      	beq.n	8006d6e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <dir_find+0x14a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a18      	ldr	r0, [r3, #32]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	220b      	movs	r2, #11
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fe fe1b 	bl	8005978 <mem_cmp>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d014      	beq.n	8006d72 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d48:	23ff      	movs	r3, #255	; 0xff
 8006d4a:	757b      	strb	r3, [r7, #21]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fc6b 	bl	8006632 <dir_next>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f43f af65 	beq.w	8006c32 <dir_find+0x34>
 8006d68:	e004      	b.n	8006d74 <dir_find+0x176>
		if (res != FR_OK) break;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d72:	bf00      	nop

	return res;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08c      	sub	sp, #48	; 0x30
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <dir_register+0x20>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	e0e0      	b.n	8006f62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006da0:	2300      	movs	r3, #0
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
 8006da4:	e002      	b.n	8006dac <dir_register+0x2c>
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	3301      	adds	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f4      	bne.n	8006da6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006dc2:	f107 030c 	add.w	r3, r7, #12
 8006dc6:	220c      	movs	r2, #12
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fd99 	bl	8005900 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d032      	beq.n	8006e3e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2240      	movs	r2, #64	; 0x40
 8006ddc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006de0:	2301      	movs	r3, #1
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de4:	e016      	b.n	8006e14 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	f107 010c 	add.w	r1, r7, #12
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	f7ff fe51 	bl	8006a9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff feff 	bl	8006bfe <dir_find>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	3301      	adds	r3, #1
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2b63      	cmp	r3, #99	; 0x63
 8006e18:	d9e5      	bls.n	8006de6 <dir_register+0x66>
 8006e1a:	e000      	b.n	8006e1e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e1c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	2b64      	cmp	r3, #100	; 0x64
 8006e22:	d101      	bne.n	8006e28 <dir_register+0xa8>
 8006e24:	2307      	movs	r3, #7
 8006e26:	e09c      	b.n	8006f62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d002      	beq.n	8006e36 <dir_register+0xb6>
 8006e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e34:	e095      	b.n	8006f62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e36:	7dfa      	ldrb	r2, [r7, #23]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <dir_register+0xd8>
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	4a47      	ldr	r2, [pc, #284]	; (8006f6c <dir_register+0x1ec>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	089b      	lsrs	r3, r3, #2
 8006e54:	3301      	adds	r3, #1
 8006e56:	e000      	b.n	8006e5a <dir_register+0xda>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e5c:	6a39      	ldr	r1, [r7, #32]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fcbd 	bl	80067de <dir_alloc>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d148      	bne.n	8006f04 <dir_register+0x184>
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	623b      	str	r3, [r7, #32]
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d042      	beq.n	8006f04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	015b      	lsls	r3, r3, #5
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fb48 	bl	8006520 <dir_sdi>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d132      	bne.n	8006f04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fe8a 	bl	8006bbc <sum_sfn>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	69f8      	ldr	r0, [r7, #28]
 8006eb4:	f7fe ff52 	bl	8005d5c <move_window>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11d      	bne.n	8006f02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	6918      	ldr	r0, [r3, #16]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a19      	ldr	r1, [r3, #32]
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	7efb      	ldrb	r3, [r7, #27]
 8006ed4:	f7ff fd7a 	bl	80069cc <put_lfn>
				fs->wflag = 1;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2201      	movs	r2, #1
 8006edc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fba6 	bl	8006632 <dir_next>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d107      	bne.n	8006f04 <dir_register+0x184>
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	623b      	str	r3, [r7, #32]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1d5      	bne.n	8006eac <dir_register+0x12c>
 8006f00:	e000      	b.n	8006f04 <dir_register+0x184>
				if (res != FR_OK) break;
 8006f02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d128      	bne.n	8006f5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	4619      	mov	r1, r3
 8006f12:	69f8      	ldr	r0, [r7, #28]
 8006f14:	f7fe ff22 	bl	8005d5c <move_window>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d11b      	bne.n	8006f5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fd07 	bl	8005942 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a18      	ldr	r0, [r3, #32]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	220b      	movs	r2, #11
 8006f3e:	4619      	mov	r1, r3
 8006f40:	f7fe fcde 	bl	8005900 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	f002 0218 	and.w	r2, r2, #24
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3730      	adds	r7, #48	; 0x30
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	4ec4ec4f 	.word	0x4ec4ec4f

08006f70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	61ba      	str	r2, [r7, #24]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4413      	add	r3, r2
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fa0:	2b1f      	cmp	r3, #31
 8006fa2:	d940      	bls.n	8007026 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fa6:	2b2f      	cmp	r3, #47	; 0x2f
 8006fa8:	d006      	beq.n	8006fb8 <create_name+0x48>
 8006faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fac:	2b5c      	cmp	r3, #92	; 0x5c
 8006fae:	d110      	bne.n	8006fd2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fb0:	e002      	b.n	8006fb8 <create_name+0x48>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8006fc2:	d0f6      	beq.n	8006fb2 <create_name+0x42>
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	4413      	add	r3, r2
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8006fce:	d0f0      	beq.n	8006fb2 <create_name+0x42>
			break;
 8006fd0:	e02a      	b.n	8007028 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2bfe      	cmp	r3, #254	; 0xfe
 8006fd6:	d901      	bls.n	8006fdc <create_name+0x6c>
 8006fd8:	2306      	movs	r3, #6
 8006fda:	e177      	b.n	80072cc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fe10 	bl	8008c0c <ff_convert>
 8006fec:	4603      	mov	r3, r0
 8006fee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <create_name+0x8a>
 8006ff6:	2306      	movs	r3, #6
 8006ff8:	e168      	b.n	80072cc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ffe:	d809      	bhi.n	8007014 <create_name+0xa4>
 8007000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007002:	4619      	mov	r1, r3
 8007004:	48b3      	ldr	r0, [pc, #716]	; (80072d4 <create_name+0x364>)
 8007006:	f7fe fcde 	bl	80059c6 <chk_chr>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <create_name+0xa4>
 8007010:	2306      	movs	r3, #6
 8007012:	e15b      	b.n	80072cc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	617a      	str	r2, [r7, #20]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007022:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007024:	e7b4      	b.n	8006f90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007026:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	441a      	add	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007034:	2b1f      	cmp	r3, #31
 8007036:	d801      	bhi.n	800703c <create_name+0xcc>
 8007038:	2304      	movs	r3, #4
 800703a:	e000      	b.n	800703e <create_name+0xce>
 800703c:	2300      	movs	r3, #0
 800703e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007042:	e011      	b.n	8007068 <create_name+0xf8>
		w = lfn[di - 1];
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800704a:	3b01      	subs	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007058:	2b20      	cmp	r3, #32
 800705a:	d002      	beq.n	8007062 <create_name+0xf2>
 800705c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800705e:	2b2e      	cmp	r3, #46	; 0x2e
 8007060:	d106      	bne.n	8007070 <create_name+0x100>
		di--;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	3b01      	subs	r3, #1
 8007066:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1ea      	bne.n	8007044 <create_name+0xd4>
 800706e:	e000      	b.n	8007072 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007070:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <create_name+0x118>
 8007084:	2306      	movs	r3, #6
 8007086:	e121      	b.n	80072cc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3324      	adds	r3, #36	; 0x24
 800708c:	220b      	movs	r2, #11
 800708e:	2120      	movs	r1, #32
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fc56 	bl	8005942 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e002      	b.n	80070a2 <create_name+0x132>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	3301      	adds	r3, #1
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d0f5      	beq.n	800709c <create_name+0x12c>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	2b2e      	cmp	r3, #46	; 0x2e
 80070bc:	d0ee      	beq.n	800709c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <create_name+0x168>
 80070c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c8:	f043 0303 	orr.w	r3, r3, #3
 80070cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80070d0:	e002      	b.n	80070d8 <create_name+0x168>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <create_name+0x182>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	3b01      	subs	r3, #1
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	2b2e      	cmp	r3, #46	; 0x2e
 80070f0:	d1ef      	bne.n	80070d2 <create_name+0x162>

	i = b = 0; ni = 8;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070f8:	2300      	movs	r3, #0
 80070fa:	623b      	str	r3, [r7, #32]
 80070fc:	2308      	movs	r3, #8
 80070fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	61ba      	str	r2, [r7, #24]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8090 	beq.w	8007238 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711a:	2b20      	cmp	r3, #32
 800711c:	d006      	beq.n	800712c <create_name+0x1bc>
 800711e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007120:	2b2e      	cmp	r3, #46	; 0x2e
 8007122:	d10a      	bne.n	800713a <create_name+0x1ca>
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	429a      	cmp	r2, r3
 800712a:	d006      	beq.n	800713a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800712c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007130:	f043 0303 	orr.w	r3, r3, #3
 8007134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007138:	e07d      	b.n	8007236 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	429a      	cmp	r2, r3
 8007140:	d203      	bcs.n	800714a <create_name+0x1da>
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	429a      	cmp	r2, r3
 8007148:	d123      	bne.n	8007192 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b0b      	cmp	r3, #11
 800714e:	d106      	bne.n	800715e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007154:	f043 0303 	orr.w	r3, r3, #3
 8007158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800715c:	e06f      	b.n	800723e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	429a      	cmp	r2, r3
 8007164:	d005      	beq.n	8007172 <create_name+0x202>
 8007166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716a:	f043 0303 	orr.w	r3, r3, #3
 800716e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d860      	bhi.n	800723c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	2308      	movs	r3, #8
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	230b      	movs	r3, #11
 8007184:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007186:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007190:	e051      	b.n	8007236 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007194:	2b7f      	cmp	r3, #127	; 0x7f
 8007196:	d914      	bls.n	80071c2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fd35 	bl	8008c0c <ff_convert>
 80071a2:	4603      	mov	r3, r0
 80071a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <create_name+0x246>
 80071ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ae:	3b80      	subs	r3, #128	; 0x80
 80071b0:	4a49      	ldr	r2, [pc, #292]	; (80072d8 <create_name+0x368>)
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80071b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ba:	f043 0302 	orr.w	r3, r3, #2
 80071be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80071c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <create_name+0x268>
 80071c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ca:	4619      	mov	r1, r3
 80071cc:	4843      	ldr	r0, [pc, #268]	; (80072dc <create_name+0x36c>)
 80071ce:	f7fe fbfa 	bl	80059c6 <chk_chr>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80071d8:	235f      	movs	r3, #95	; 0x5f
 80071da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80071dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e0:	f043 0303 	orr.w	r3, r3, #3
 80071e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071e8:	e01b      	b.n	8007222 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80071ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d909      	bls.n	8007204 <create_name+0x294>
 80071f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f2:	2b5a      	cmp	r3, #90	; 0x5a
 80071f4:	d806      	bhi.n	8007204 <create_name+0x294>
					b |= 2;
 80071f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071fa:	f043 0302 	orr.w	r3, r3, #2
 80071fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007202:	e00e      	b.n	8007222 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007206:	2b60      	cmp	r3, #96	; 0x60
 8007208:	d90b      	bls.n	8007222 <create_name+0x2b2>
 800720a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800720c:	2b7a      	cmp	r3, #122	; 0x7a
 800720e:	d808      	bhi.n	8007222 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007214:	f043 0301 	orr.w	r3, r3, #1
 8007218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800721c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721e:	3b20      	subs	r3, #32
 8007220:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	623a      	str	r2, [r7, #32]
 8007228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800722a:	b2d1      	uxtb	r1, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4413      	add	r3, r2
 8007230:	460a      	mov	r2, r1
 8007232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007236:	e763      	b.n	8007100 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800723c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007244:	2be5      	cmp	r3, #229	; 0xe5
 8007246:	d103      	bne.n	8007250 <create_name+0x2e0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2205      	movs	r2, #5
 800724c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b08      	cmp	r3, #8
 8007254:	d104      	bne.n	8007260 <create_name+0x2f0>
 8007256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007264:	f003 030c 	and.w	r3, r3, #12
 8007268:	2b0c      	cmp	r3, #12
 800726a:	d005      	beq.n	8007278 <create_name+0x308>
 800726c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	2b03      	cmp	r3, #3
 8007276:	d105      	bne.n	8007284 <create_name+0x314>
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	f043 0302 	orr.w	r3, r3, #2
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d117      	bne.n	80072c0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <create_name+0x338>
 800729c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072a0:	f043 0310 	orr.w	r3, r3, #16
 80072a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80072a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d105      	bne.n	80072c0 <create_name+0x350>
 80072b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b8:	f043 0308 	orr.w	r3, r3, #8
 80072bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80072c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80072ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3728      	adds	r7, #40	; 0x28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080096f4 	.word	0x080096f4
 80072d8:	08009784 	.word	0x08009784
 80072dc:	08009700 	.word	0x08009700

080072e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80072f4:	e002      	b.n	80072fc <follow_path+0x1c>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b2f      	cmp	r3, #47	; 0x2f
 8007302:	d0f8      	beq.n	80072f6 <follow_path+0x16>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b5c      	cmp	r3, #92	; 0x5c
 800730a:	d0f4      	beq.n	80072f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b1f      	cmp	r3, #31
 8007318:	d80a      	bhi.n	8007330 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2280      	movs	r2, #128	; 0x80
 800731e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff f8fb 	bl	8006520 <dir_sdi>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e048      	b.n	80073c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007330:	463b      	mov	r3, r7
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fe1b 	bl	8006f70 <create_name>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d139      	bne.n	80073b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fc5a 	bl	8006bfe <dir_find>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007354:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b04      	cmp	r3, #4
 8007360:	d12c      	bne.n	80073bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d127      	bne.n	80073bc <follow_path+0xdc>
 800736c:	2305      	movs	r3, #5
 800736e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007370:	e024      	b.n	80073bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d121      	bne.n	80073c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	799b      	ldrb	r3, [r3, #6]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007388:	2305      	movs	r3, #5
 800738a:	75fb      	strb	r3, [r7, #23]
 800738c:	e019      	b.n	80073c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	8992      	ldrh	r2, [r2, #12]
 800739c:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a0:	fb02 f200 	mul.w	r2, r2, r0
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	440b      	add	r3, r1
 80073a8:	4619      	mov	r1, r3
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff fa5e 	bl	800686c <ld_clust>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073b6:	e7bb      	b.n	8007330 <follow_path+0x50>
			if (res != FR_OK) break;
 80073b8:	bf00      	nop
 80073ba:	e002      	b.n	80073c2 <follow_path+0xe2>
				break;
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073c0:	bf00      	nop
			}
		}
	}

	return res;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d031      	beq.n	8007446 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e002      	b.n	80073f0 <get_ldnumber+0x24>
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	3301      	adds	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b1f      	cmp	r3, #31
 80073f6:	d903      	bls.n	8007400 <get_ldnumber+0x34>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b3a      	cmp	r3, #58	; 0x3a
 80073fe:	d1f4      	bne.n	80073ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b3a      	cmp	r3, #58	; 0x3a
 8007406:	d11c      	bne.n	8007442 <get_ldnumber+0x76>
			tp = *path;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	60fa      	str	r2, [r7, #12]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	3b30      	subs	r3, #48	; 0x30
 8007418:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b09      	cmp	r3, #9
 800741e:	d80e      	bhi.n	800743e <get_ldnumber+0x72>
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	429a      	cmp	r2, r3
 8007426:	d10a      	bne.n	800743e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <get_ldnumber+0x72>
					vol = (int)i;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	3301      	adds	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	e002      	b.n	8007448 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007446:	693b      	ldr	r3, [r7, #16]
}
 8007448:	4618      	mov	r0, r3
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	70da      	strb	r2, [r3, #3]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fe fc74 	bl	8005d5c <move_window>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <check_fs+0x2a>
 800747a:	2304      	movs	r3, #4
 800747c:	e038      	b.n	80074f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3338      	adds	r3, #56	; 0x38
 8007482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe f9b8 	bl	80057fc <ld_word>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <check_fs+0x48>
 8007498:	2303      	movs	r3, #3
 800749a:	e029      	b.n	80074f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074a2:	2be9      	cmp	r3, #233	; 0xe9
 80074a4:	d009      	beq.n	80074ba <check_fs+0x66>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074ac:	2beb      	cmp	r3, #235	; 0xeb
 80074ae:	d11e      	bne.n	80074ee <check_fs+0x9a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80074b6:	2b90      	cmp	r3, #144	; 0x90
 80074b8:	d119      	bne.n	80074ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3338      	adds	r3, #56	; 0x38
 80074be:	3336      	adds	r3, #54	; 0x36
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe f9b3 	bl	800582c <ld_dword>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <check_fs+0xa4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d101      	bne.n	80074d6 <check_fs+0x82>
 80074d2:	2300      	movs	r3, #0
 80074d4:	e00c      	b.n	80074f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3338      	adds	r3, #56	; 0x38
 80074da:	3352      	adds	r3, #82	; 0x52
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe f9a5 	bl	800582c <ld_dword>
 80074e2:	4603      	mov	r3, r0
 80074e4:	4a05      	ldr	r2, [pc, #20]	; (80074fc <check_fs+0xa8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d101      	bne.n	80074ee <check_fs+0x9a>
 80074ea:	2300      	movs	r3, #0
 80074ec:	e000      	b.n	80074f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80074ee:	2302      	movs	r3, #2
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	00544146 	.word	0x00544146
 80074fc:	33544146 	.word	0x33544146

08007500 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b096      	sub	sp, #88	; 0x58
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ff59 	bl	80073cc <get_ldnumber>
 800751a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800751c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	da01      	bge.n	8007526 <find_volume+0x26>
 8007522:	230b      	movs	r3, #11
 8007524:	e268      	b.n	80079f8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007526:	4ab0      	ldr	r2, [pc, #704]	; (80077e8 <find_volume+0x2e8>)
 8007528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <find_volume+0x3a>
 8007536:	230c      	movs	r3, #12
 8007538:	e25e      	b.n	80079f8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800753e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe f8b3 	bl	80056c0 <disk_status>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10c      	bne.n	8007586 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <find_volume+0x82>
 8007572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800757e:	230a      	movs	r3, #10
 8007580:	e23a      	b.n	80079f8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8007582:	2300      	movs	r3, #0
 8007584:	e238      	b.n	80079f8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800758c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f8ab 	bl	80056f4 <disk_initialize>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075b0:	2303      	movs	r3, #3
 80075b2:	e221      	b.n	80079f8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <find_volume+0xca>
 80075ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80075c6:	230a      	movs	r3, #10
 80075c8:	e216      	b.n	80079f8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	7858      	ldrb	r0, [r3, #1]
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	330c      	adds	r3, #12
 80075d2:	461a      	mov	r2, r3
 80075d4:	2102      	movs	r1, #2
 80075d6:	f7fe f8f3 	bl	80057c0 <disk_ioctl>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <find_volume+0xe4>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e209      	b.n	80079f8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	899b      	ldrh	r3, [r3, #12]
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d80d      	bhi.n	800760a <find_volume+0x10a>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	899b      	ldrh	r3, [r3, #12]
 80075f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f6:	d308      	bcc.n	800760a <find_volume+0x10a>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	899b      	ldrh	r3, [r3, #12]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	899b      	ldrh	r3, [r3, #12]
 8007602:	3b01      	subs	r3, #1
 8007604:	4013      	ands	r3, r2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <find_volume+0x10e>
 800760a:	2301      	movs	r3, #1
 800760c:	e1f4      	b.n	80079f8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007616:	f7ff ff1d 	bl	8007454 <check_fs>
 800761a:	4603      	mov	r3, r0
 800761c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007624:	2b02      	cmp	r3, #2
 8007626:	d14b      	bne.n	80076c0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007628:	2300      	movs	r3, #0
 800762a:	643b      	str	r3, [r7, #64]	; 0x40
 800762c:	e01f      	b.n	800766e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800763c:	4413      	add	r3, r2
 800763e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	3304      	adds	r3, #4
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d006      	beq.n	8007658 <find_volume+0x158>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	3308      	adds	r3, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe f8ec 	bl	800582c <ld_dword>
 8007654:	4602      	mov	r2, r0
 8007656:	e000      	b.n	800765a <find_volume+0x15a>
 8007658:	2200      	movs	r2, #0
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007662:	440b      	add	r3, r1
 8007664:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766a:	3301      	adds	r3, #1
 800766c:	643b      	str	r3, [r7, #64]	; 0x40
 800766e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007670:	2b03      	cmp	r3, #3
 8007672:	d9dc      	bls.n	800762e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007674:	2300      	movs	r3, #0
 8007676:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <find_volume+0x184>
 800767e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007680:	3b01      	subs	r3, #1
 8007682:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800768c:	4413      	add	r3, r2
 800768e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <find_volume+0x1a6>
 800769a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800769c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800769e:	f7ff fed9 	bl	8007454 <check_fs>
 80076a2:	4603      	mov	r3, r0
 80076a4:	e000      	b.n	80076a8 <find_volume+0x1a8>
 80076a6:	2303      	movs	r3, #3
 80076a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d905      	bls.n	80076c0 <find_volume+0x1c0>
 80076b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b6:	3301      	adds	r3, #1
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d9e1      	bls.n	8007684 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d101      	bne.n	80076cc <find_volume+0x1cc>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e195      	b.n	80079f8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d901      	bls.n	80076d8 <find_volume+0x1d8>
 80076d4:	230d      	movs	r3, #13
 80076d6:	e18f      	b.n	80079f8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	3338      	adds	r3, #56	; 0x38
 80076dc:	330b      	adds	r3, #11
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe f88c 	bl	80057fc <ld_word>
 80076e4:	4603      	mov	r3, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	899b      	ldrh	r3, [r3, #12]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d001      	beq.n	80076f4 <find_volume+0x1f4>
 80076f0:	230d      	movs	r3, #13
 80076f2:	e181      	b.n	80079f8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	3338      	adds	r3, #56	; 0x38
 80076f8:	3316      	adds	r3, #22
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe f87e 	bl	80057fc <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <find_volume+0x218>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	3338      	adds	r3, #56	; 0x38
 800770e:	3324      	adds	r3, #36	; 0x24
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f88b 	bl	800582c <ld_dword>
 8007716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800771c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d005      	beq.n	800773c <find_volume+0x23c>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	789b      	ldrb	r3, [r3, #2]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d001      	beq.n	800773c <find_volume+0x23c>
 8007738:	230d      	movs	r3, #13
 800773a:	e15d      	b.n	80079f8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	461a      	mov	r2, r3
 8007742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007750:	b29a      	uxth	r2, r3
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	895b      	ldrh	r3, [r3, #10]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <find_volume+0x270>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	895b      	ldrh	r3, [r3, #10]
 8007762:	461a      	mov	r2, r3
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	895b      	ldrh	r3, [r3, #10]
 8007768:	3b01      	subs	r3, #1
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <find_volume+0x274>
 8007770:	230d      	movs	r3, #13
 8007772:	e141      	b.n	80079f8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	3338      	adds	r3, #56	; 0x38
 8007778:	3311      	adds	r3, #17
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe f83e 	bl	80057fc <ld_word>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	891b      	ldrh	r3, [r3, #8]
 800778c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778e:	8992      	ldrh	r2, [r2, #12]
 8007790:	0952      	lsrs	r2, r2, #5
 8007792:	b292      	uxth	r2, r2
 8007794:	fbb3 f1f2 	udiv	r1, r3, r2
 8007798:	fb02 f201 	mul.w	r2, r2, r1
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <find_volume+0x2a8>
 80077a4:	230d      	movs	r3, #13
 80077a6:	e127      	b.n	80079f8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	3338      	adds	r3, #56	; 0x38
 80077ac:	3313      	adds	r3, #19
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f824 	bl	80057fc <ld_word>
 80077b4:	4603      	mov	r3, r0
 80077b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <find_volume+0x2cc>
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	3338      	adds	r3, #56	; 0x38
 80077c2:	3320      	adds	r3, #32
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe f831 	bl	800582c <ld_dword>
 80077ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	3338      	adds	r3, #56	; 0x38
 80077d0:	330e      	adds	r3, #14
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe f812 	bl	80057fc <ld_word>
 80077d8:	4603      	mov	r3, r0
 80077da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d104      	bne.n	80077ec <find_volume+0x2ec>
 80077e2:	230d      	movs	r3, #13
 80077e4:	e108      	b.n	80079f8 <find_volume+0x4f8>
 80077e6:	bf00      	nop
 80077e8:	200000b4 	.word	0x200000b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80077ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f0:	4413      	add	r3, r2
 80077f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f4:	8911      	ldrh	r1, [r2, #8]
 80077f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f8:	8992      	ldrh	r2, [r2, #12]
 80077fa:	0952      	lsrs	r2, r2, #5
 80077fc:	b292      	uxth	r2, r2
 80077fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8007802:	b292      	uxth	r2, r2
 8007804:	4413      	add	r3, r2
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	429a      	cmp	r2, r3
 800780e:	d201      	bcs.n	8007814 <find_volume+0x314>
 8007810:	230d      	movs	r3, #13
 8007812:	e0f1      	b.n	80079f8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781c:	8952      	ldrh	r2, [r2, #10]
 800781e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <find_volume+0x32e>
 800782a:	230d      	movs	r3, #13
 800782c:	e0e4      	b.n	80079f8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800782e:	2303      	movs	r3, #3
 8007830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800783a:	4293      	cmp	r3, r2
 800783c:	d802      	bhi.n	8007844 <find_volume+0x344>
 800783e:	2302      	movs	r3, #2
 8007840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	f640 72f5 	movw	r2, #4085	; 0xff5
 800784a:	4293      	cmp	r3, r2
 800784c:	d802      	bhi.n	8007854 <find_volume+0x354>
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007860:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007862:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007866:	441a      	add	r2, r3
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800786c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	441a      	add	r2, r3
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800787a:	2b03      	cmp	r3, #3
 800787c:	d11e      	bne.n	80078bc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	3338      	adds	r3, #56	; 0x38
 8007882:	332a      	adds	r3, #42	; 0x2a
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd ffb9 	bl	80057fc <ld_word>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <find_volume+0x394>
 8007890:	230d      	movs	r3, #13
 8007892:	e0b1      	b.n	80079f8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	891b      	ldrh	r3, [r3, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <find_volume+0x3a0>
 800789c:	230d      	movs	r3, #13
 800789e:	e0ab      	b.n	80079f8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	3338      	adds	r3, #56	; 0x38
 80078a4:	332c      	adds	r3, #44	; 0x2c
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fd ffc0 	bl	800582c <ld_dword>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ba:	e01f      	b.n	80078fc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	891b      	ldrh	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <find_volume+0x3c8>
 80078c4:	230d      	movs	r3, #13
 80078c6:	e097      	b.n	80079f8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ce:	441a      	add	r2, r3
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d103      	bne.n	80078e4 <find_volume+0x3e4>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	e00a      	b.n	80078fa <find_volume+0x3fa>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	085a      	lsrs	r2, r3, #1
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80078fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	899b      	ldrh	r3, [r3, #12]
 8007904:	4619      	mov	r1, r3
 8007906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007908:	440b      	add	r3, r1
 800790a:	3b01      	subs	r3, #1
 800790c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800790e:	8989      	ldrh	r1, [r1, #12]
 8007910:	fbb3 f3f1 	udiv	r3, r3, r1
 8007914:	429a      	cmp	r2, r3
 8007916:	d201      	bcs.n	800791c <find_volume+0x41c>
 8007918:	230d      	movs	r3, #13
 800791a:	e06d      	b.n	80079f8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	f04f 32ff 	mov.w	r2, #4294967295
 8007922:	619a      	str	r2, [r3, #24]
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	2280      	movs	r2, #128	; 0x80
 8007930:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007936:	2b03      	cmp	r3, #3
 8007938:	d149      	bne.n	80079ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	3338      	adds	r3, #56	; 0x38
 800793e:	3330      	adds	r3, #48	; 0x30
 8007940:	4618      	mov	r0, r3
 8007942:	f7fd ff5b 	bl	80057fc <ld_word>
 8007946:	4603      	mov	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d140      	bne.n	80079ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800794c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794e:	3301      	adds	r3, #1
 8007950:	4619      	mov	r1, r3
 8007952:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007954:	f7fe fa02 	bl	8005d5c <move_window>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d137      	bne.n	80079ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2200      	movs	r2, #0
 8007962:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	3338      	adds	r3, #56	; 0x38
 8007968:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd ff45 	bl	80057fc <ld_word>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800797a:	429a      	cmp	r2, r3
 800797c:	d127      	bne.n	80079ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	3338      	adds	r3, #56	; 0x38
 8007982:	4618      	mov	r0, r3
 8007984:	f7fd ff52 	bl	800582c <ld_dword>
 8007988:	4603      	mov	r3, r0
 800798a:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <find_volume+0x500>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d11e      	bne.n	80079ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	3338      	adds	r3, #56	; 0x38
 8007994:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd ff47 	bl	800582c <ld_dword>
 800799e:	4603      	mov	r3, r0
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <find_volume+0x504>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d113      	bne.n	80079ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	3338      	adds	r3, #56	; 0x38
 80079aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd ff3c 	bl	800582c <ld_dword>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	3338      	adds	r3, #56	; 0x38
 80079be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd ff32 	bl	800582c <ld_dword>
 80079c8:	4602      	mov	r2, r0
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80079d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <find_volume+0x508>)
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <find_volume+0x508>)
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <find_volume+0x508>)
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <find_volume+0x50c>)
 80079ee:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f2:	f7fe f94b 	bl	8005c8c <clear_lock>
#endif
	return FR_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3758      	adds	r7, #88	; 0x58
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	41615252 	.word	0x41615252
 8007a04:	61417272 	.word	0x61417272
 8007a08:	200000b8 	.word	0x200000b8
 8007a0c:	200000dc 	.word	0x200000dc

08007a10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a1a:	2309      	movs	r3, #9
 8007a1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01c      	beq.n	8007a5e <validate+0x4e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d018      	beq.n	8007a5e <validate+0x4e>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <validate+0x4e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	889a      	ldrh	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d10c      	bne.n	8007a5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd fe38 	bl	80056c0 <disk_status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <validate+0x4e>
			res = FR_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <validate+0x5a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	e000      	b.n	8007a6c <validate+0x5c>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6013      	str	r3, [r2, #0]
	return res;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a8e:	f107 0310 	add.w	r3, r7, #16
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fc9a 	bl	80073cc <get_ldnumber>
 8007a98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da01      	bge.n	8007aa4 <f_mount+0x28>
 8007aa0:	230b      	movs	r3, #11
 8007aa2:	e02b      	b.n	8007afc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007aa4:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <f_mount+0x88>)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ab4:	69b8      	ldr	r0, [r7, #24]
 8007ab6:	f7fe f8e9 	bl	8005c8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	490d      	ldr	r1, [pc, #52]	; (8007b04 <f_mount+0x88>)
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <f_mount+0x66>
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d001      	beq.n	8007ae6 <f_mount+0x6a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e00a      	b.n	8007afc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ae6:	f107 010c 	add.w	r1, r7, #12
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	2200      	movs	r2, #0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff fd05 	bl	8007500 <find_volume>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200000b4 	.word	0x200000b4

08007b08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b09a      	sub	sp, #104	; 0x68
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <f_open+0x18>
 8007b1c:	2309      	movs	r3, #9
 8007b1e:	e1bb      	b.n	8007e98 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	f107 0114 	add.w	r1, r7, #20
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fce4 	bl	8007500 <find_volume>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 819f 	bne.w	8007e86 <f_open+0x37e>
		dj.obj.fs = fs;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	f107 0318 	add.w	r3, r7, #24
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fbc3 	bl	80072e0 <follow_path>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11a      	bne.n	8007b9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da03      	bge.n	8007b7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b72:	2306      	movs	r3, #6
 8007b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b78:	e011      	b.n	8007b9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	f023 0301 	bic.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf14      	ite	ne
 8007b84:	2301      	movne	r3, #1
 8007b86:	2300      	moveq	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f107 0318 	add.w	r3, r7, #24
 8007b90:	4611      	mov	r1, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fd ff32 	bl	80059fc <chk_lock>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	f003 031c 	and.w	r3, r3, #28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d07f      	beq.n	8007ca8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d017      	beq.n	8007be0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d10e      	bne.n	8007bd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bb8:	f7fd ff7c 	bl	8005ab4 <enq_lock>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <f_open+0xc8>
 8007bc2:	f107 0318 	add.w	r3, r7, #24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f8da 	bl	8006d80 <dir_register>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	e000      	b.n	8007bd2 <f_open+0xca>
 8007bd0:	2312      	movs	r3, #18
 8007bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	71fb      	strb	r3, [r7, #7]
 8007bde:	e010      	b.n	8007c02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007be0:	7fbb      	ldrb	r3, [r7, #30]
 8007be2:	f003 0311 	and.w	r3, r3, #17
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <f_open+0xea>
					res = FR_DENIED;
 8007bea:	2307      	movs	r3, #7
 8007bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007bf0:	e007      	b.n	8007c02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <f_open+0xfa>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d168      	bne.n	8007cdc <f_open+0x1d4>
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d063      	beq.n	8007cdc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007c14:	f7fd fcf2 	bl	80055fc <get_fattime>
 8007c18:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	330e      	adds	r3, #14
 8007c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd fe41 	bl	80058a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	3316      	adds	r3, #22
 8007c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd fe3b 	bl	80058a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	330b      	adds	r3, #11
 8007c36:	2220      	movs	r2, #32
 8007c38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fe13 	bl	800686c <ld_clust>
 8007c46:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fe2b 	bl	80068aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	331c      	adds	r3, #28
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fe24 	bl	80058a8 <st_dword>
					fs->wflag = 1;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2201      	movs	r2, #1
 8007c64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d037      	beq.n	8007cdc <f_open+0x1d4>
						dw = fs->winsect;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c72:	f107 0318 	add.w	r3, r7, #24
 8007c76:	2200      	movs	r2, #0
 8007c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fb1b 	bl	80062b6 <remove_chain>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d126      	bne.n	8007cdc <f_open+0x1d4>
							res = move_window(fs, dw);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe f862 	bl	8005d5c <move_window>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ca2:	3a01      	subs	r2, #1
 8007ca4:	615a      	str	r2, [r3, #20]
 8007ca6:	e019      	b.n	8007cdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ca8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d115      	bne.n	8007cdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cb0:	7fbb      	ldrb	r3, [r7, #30]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007cba:	2304      	movs	r3, #4
 8007cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007cc0:	e00c      	b.n	8007cdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d007      	beq.n	8007cdc <f_open+0x1d4>
 8007ccc:	7fbb      	ldrb	r3, [r7, #30]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <f_open+0x1d4>
						res = FR_DENIED;
 8007cd6:	2307      	movs	r3, #7
 8007cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d128      	bne.n	8007d36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	f023 0301 	bic.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf14      	ite	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	2300      	moveq	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd feeb 	bl	8005af8 <inc_lock>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <f_open+0x22e>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f040 80a3 	bne.w	8007e86 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fd90 	bl	800686c <ld_clust>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	331c      	adds	r3, #28
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd fd68 	bl	800582c <ld_dword>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	88da      	ldrh	r2, [r3, #6]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	79fa      	ldrb	r2, [r7, #7]
 8007d7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3330      	adds	r3, #48	; 0x30
 8007d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fdd2 	bl	8005942 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d06e      	beq.n	8007e86 <f_open+0x37e>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d06a      	beq.n	8007e86 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	895b      	ldrh	r3, [r3, #10]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	899b      	ldrh	r3, [r3, #12]
 8007dc2:	fb03 f302 	mul.w	r3, r3, r2
 8007dc6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd4:	e016      	b.n	8007e04 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe f87b 	bl	8005ed6 <get_fat>
 8007de0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d802      	bhi.n	8007dee <f_open+0x2e6>
 8007de8:	2302      	movs	r3, #2
 8007dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d102      	bne.n	8007dfc <f_open+0x2f4>
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <f_open+0x30c>
 8007e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d8e0      	bhi.n	8007dd6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d131      	bne.n	8007e86 <f_open+0x37e>
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	899b      	ldrh	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e2e:	fb02 f201 	mul.w	r2, r2, r1
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d026      	beq.n	8007e86 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe f82b 	bl	8005e98 <clust2sect>
 8007e42:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <f_open+0x34a>
						res = FR_INT_ERR;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e50:	e019      	b.n	8007e86 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	899b      	ldrh	r3, [r3, #12]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	7858      	ldrb	r0, [r3, #1]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	2301      	movs	r3, #1
 8007e76:	f7fd fc63 	bl	8005740 <disk_read>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <f_open+0x37e>
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <f_open+0x38c>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3768      	adds	r7, #104	; 0x68
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08e      	sub	sp, #56	; 0x38
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f107 0214 	add.w	r2, r7, #20
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff fda5 	bl	8007a10 <validate>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d107      	bne.n	8007ee4 <f_read+0x44>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	7d5b      	ldrb	r3, [r3, #21]
 8007ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <f_read+0x4a>
 8007ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ee8:	e135      	b.n	8008156 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	7d1b      	ldrb	r3, [r3, #20]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <f_read+0x5a>
 8007ef6:	2307      	movs	r3, #7
 8007ef8:	e12d      	b.n	8008156 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	f240 811e 	bls.w	800814c <f_read+0x2ac>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f14:	e11a      	b.n	800814c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	8992      	ldrh	r2, [r2, #12]
 8007f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f22:	fb02 f201 	mul.w	r2, r2, r1
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f040 80d5 	bne.w	80080d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	8992      	ldrh	r2, [r2, #12]
 8007f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	8952      	ldrh	r2, [r2, #10]
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	4013      	ands	r3, r2
 8007f42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d12f      	bne.n	8007faa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
 8007f58:	e013      	b.n	8007f82 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7fe faa1 	bl	80064b0 <clmt_clust>
 8007f6e:	6338      	str	r0, [r7, #48]	; 0x30
 8007f70:	e007      	b.n	8007f82 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7fd ffab 	bl	8005ed6 <get_fat>
 8007f80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d804      	bhi.n	8007f92 <f_read+0xf2>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	755a      	strb	r2, [r3, #21]
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e0e1      	b.n	8008156 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d104      	bne.n	8007fa4 <f_read+0x104>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	755a      	strb	r2, [r3, #21]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0d8      	b.n	8008156 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fd ff70 	bl	8005e98 <clust2sect>
 8007fb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <f_read+0x12a>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	755a      	strb	r2, [r3, #21]
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e0c5      	b.n	8008156 <f_read+0x2b6>
			sect += csect;
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	899b      	ldrh	r3, [r3, #12]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d041      	beq.n	800806a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	4413      	add	r3, r2
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	8952      	ldrh	r2, [r2, #10]
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d905      	bls.n	8008000 <f_read+0x160>
					cc = fs->csize - csect;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	895b      	ldrh	r3, [r3, #10]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	7858      	ldrb	r0, [r3, #1]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800800a:	f7fd fb99 	bl	8005740 <disk_read>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <f_read+0x17e>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	755a      	strb	r2, [r3, #21]
 800801a:	2301      	movs	r3, #1
 800801c:	e09b      	b.n	8008156 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	7d1b      	ldrb	r3, [r3, #20]
 8008022:	b25b      	sxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	da18      	bge.n	800805a <f_read+0x1ba>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1a      	ldr	r2, [r3, #32]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008032:	429a      	cmp	r2, r3
 8008034:	d911      	bls.n	800805a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a1a      	ldr	r2, [r3, #32]
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	8992      	ldrh	r2, [r2, #12]
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008048:	18d0      	adds	r0, r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	899b      	ldrh	r3, [r3, #12]
 8008054:	461a      	mov	r2, r3
 8008056:	f7fd fc53 	bl	8005900 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	899b      	ldrh	r3, [r3, #12]
 800805e:	461a      	mov	r2, r3
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008068:	e05c      	b.n	8008124 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	429a      	cmp	r2, r3
 8008072:	d02e      	beq.n	80080d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	7d1b      	ldrb	r3, [r3, #20]
 8008078:	b25b      	sxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	da18      	bge.n	80080b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	7858      	ldrb	r0, [r3, #1]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	2301      	movs	r3, #1
 800808e:	f7fd fb77 	bl	8005780 <disk_write>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <f_read+0x202>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	755a      	strb	r2, [r3, #21]
 800809e:	2301      	movs	r3, #1
 80080a0:	e059      	b.n	8008156 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	7d1b      	ldrb	r3, [r3, #20]
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	7858      	ldrb	r0, [r3, #1]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080ba:	2301      	movs	r3, #1
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	f7fd fb3f 	bl	8005740 <disk_read>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <f_read+0x232>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	755a      	strb	r2, [r3, #21]
 80080ce:	2301      	movs	r3, #1
 80080d0:	e041      	b.n	8008156 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	899b      	ldrh	r3, [r3, #12]
 80080dc:	4618      	mov	r0, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	8992      	ldrh	r2, [r2, #12]
 80080e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080ea:	fb02 f201 	mul.w	r2, r2, r1
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	1ac3      	subs	r3, r0, r3
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d901      	bls.n	8008100 <f_read+0x260>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	8992      	ldrh	r2, [r2, #12]
 800810e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008112:	fb02 f200 	mul.w	r2, r2, r0
 8008116:	1a9b      	subs	r3, r3, r2
 8008118:	440b      	add	r3, r1
 800811a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800811c:	4619      	mov	r1, r3
 800811e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008120:	f7fd fbee 	bl	8005900 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	4413      	add	r3, r2
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	441a      	add	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	619a      	str	r2, [r3, #24]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	441a      	add	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f47f aee1 	bne.w	8007f16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3738      	adds	r7, #56	; 0x38
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b08c      	sub	sp, #48	; 0x30
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f107 0210 	add.w	r2, r7, #16
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fc46 	bl	8007a10 <validate>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800818a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800818e:	2b00      	cmp	r3, #0
 8008190:	d107      	bne.n	80081a2 <f_write+0x44>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	7d5b      	ldrb	r3, [r3, #21]
 8008196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800819a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <f_write+0x4a>
 80081a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081a6:	e16a      	b.n	800847e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <f_write+0x5a>
 80081b4:	2307      	movs	r3, #7
 80081b6:	e162      	b.n	800847e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	f080 814c 	bcs.w	8008462 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	43db      	mvns	r3, r3
 80081d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80081d2:	e146      	b.n	8008462 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	8992      	ldrh	r2, [r2, #12]
 80081dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80081e0:	fb02 f201 	mul.w	r2, r2, r1
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 80f1 	bne.w	80083ce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	8992      	ldrh	r2, [r2, #12]
 80081f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	8952      	ldrh	r2, [r2, #10]
 80081fc:	3a01      	subs	r2, #1
 80081fe:	4013      	ands	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d143      	bne.n	8008290 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10c      	bne.n	800822a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	2b00      	cmp	r3, #0
 800821a:	d11a      	bne.n	8008252 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe f8ad 	bl	8006380 <create_chain>
 8008226:	62b8      	str	r0, [r7, #40]	; 0x28
 8008228:	e013      	b.n	8008252 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	4619      	mov	r1, r3
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7fe f939 	bl	80064b0 <clmt_clust>
 800823e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008240:	e007      	b.n	8008252 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f7fe f898 	bl	8006380 <create_chain>
 8008250:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8109 	beq.w	800846c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b01      	cmp	r3, #1
 800825e:	d104      	bne.n	800826a <f_write+0x10c>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2202      	movs	r2, #2
 8008264:	755a      	strb	r2, [r3, #21]
 8008266:	2302      	movs	r3, #2
 8008268:	e109      	b.n	800847e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d104      	bne.n	800827c <f_write+0x11e>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	755a      	strb	r2, [r3, #21]
 8008278:	2301      	movs	r3, #1
 800827a:	e100      	b.n	800847e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008280:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <f_write+0x132>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	7d1b      	ldrb	r3, [r3, #20]
 8008294:	b25b      	sxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	da18      	bge.n	80082cc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	7858      	ldrb	r0, [r3, #1]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a1a      	ldr	r2, [r3, #32]
 80082a8:	2301      	movs	r3, #1
 80082aa:	f7fd fa69 	bl	8005780 <disk_write>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <f_write+0x160>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2201      	movs	r2, #1
 80082b8:	755a      	strb	r2, [r3, #21]
 80082ba:	2301      	movs	r3, #1
 80082bc:	e0df      	b.n	800847e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	7d1b      	ldrb	r3, [r3, #20]
 80082c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fd fddf 	bl	8005e98 <clust2sect>
 80082da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <f_write+0x18e>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	755a      	strb	r2, [r3, #21]
 80082e8:	2302      	movs	r3, #2
 80082ea:	e0c8      	b.n	800847e <f_write+0x320>
			sect += csect;
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	4413      	add	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	899b      	ldrh	r3, [r3, #12]
 80082f8:	461a      	mov	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008300:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d043      	beq.n	8008390 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	4413      	add	r3, r2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	8952      	ldrh	r2, [r2, #10]
 8008312:	4293      	cmp	r3, r2
 8008314:	d905      	bls.n	8008322 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	895b      	ldrh	r3, [r3, #10]
 800831a:	461a      	mov	r2, r3
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	7858      	ldrb	r0, [r3, #1]
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	69f9      	ldr	r1, [r7, #28]
 800832c:	f7fd fa28 	bl	8005780 <disk_write>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <f_write+0x1e2>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	755a      	strb	r2, [r3, #21]
 800833c:	2301      	movs	r3, #1
 800833e:	e09e      	b.n	800847e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	429a      	cmp	r2, r3
 800834c:	d918      	bls.n	8008380 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	8992      	ldrh	r2, [r2, #12]
 8008360:	fb02 f303 	mul.w	r3, r2, r3
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	18d1      	adds	r1, r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	899b      	ldrh	r3, [r3, #12]
 800836c:	461a      	mov	r2, r3
 800836e:	f7fd fac7 	bl	8005900 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	7d1b      	ldrb	r3, [r3, #20]
 8008376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837a:	b2da      	uxtb	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	899b      	ldrh	r3, [r3, #12]
 8008384:	461a      	mov	r2, r3
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	fb02 f303 	mul.w	r3, r2, r3
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800838e:	e04b      	b.n	8008428 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	429a      	cmp	r2, r3
 8008398:	d016      	beq.n	80083c8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d210      	bcs.n	80083c8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	7858      	ldrb	r0, [r3, #1]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083b0:	2301      	movs	r3, #1
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	f7fd f9c4 	bl	8005740 <disk_read>
 80083b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	755a      	strb	r2, [r3, #21]
 80083c4:	2301      	movs	r3, #1
 80083c6:	e05a      	b.n	800847e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	899b      	ldrh	r3, [r3, #12]
 80083d2:	4618      	mov	r0, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	8992      	ldrh	r2, [r2, #12]
 80083dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80083e0:	fb02 f201 	mul.w	r2, r2, r1
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	1ac3      	subs	r3, r0, r3
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80083ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d901      	bls.n	80083f6 <f_write+0x298>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	8992      	ldrh	r2, [r2, #12]
 8008404:	fbb3 f0f2 	udiv	r0, r3, r2
 8008408:	fb02 f200 	mul.w	r2, r2, r0
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	440b      	add	r3, r1
 8008410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fd fa73 	bl	8005900 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	7d1b      	ldrb	r3, [r3, #20]
 800841e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	4413      	add	r3, r2
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	699a      	ldr	r2, [r3, #24]
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	441a      	add	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	619a      	str	r2, [r3, #24]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	429a      	cmp	r2, r3
 8008446:	bf38      	it	cc
 8008448:	461a      	movcc	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	441a      	add	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f aeb5 	bne.w	80081d4 <f_write+0x76>
 800846a:	e000      	b.n	800846e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800846c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	7d1b      	ldrb	r3, [r3, #20]
 8008472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3730      	adds	r7, #48	; 0x30
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f107 0208 	add.w	r2, r7, #8
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff faba 	bl	8007a10 <validate>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d168      	bne.n	8008578 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7d1b      	ldrb	r3, [r3, #20]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d062      	beq.n	8008578 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	7d1b      	ldrb	r3, [r3, #20]
 80084b6:	b25b      	sxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da15      	bge.n	80084e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1a      	ldr	r2, [r3, #32]
 80084ca:	2301      	movs	r3, #1
 80084cc:	f7fd f958 	bl	8005780 <disk_write>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <f_sync+0x54>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e04f      	b.n	800857a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084e8:	f7fd f888 	bl	80055fc <get_fattime>
 80084ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fd fc30 	bl	8005d5c <move_window>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d138      	bne.n	8008578 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	330b      	adds	r3, #11
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	330b      	adds	r3, #11
 8008516:	f042 0220 	orr.w	r2, r2, #32
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	461a      	mov	r2, r3
 8008528:	68f9      	ldr	r1, [r7, #12]
 800852a:	f7fe f9be 	bl	80068aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f103 021c 	add.w	r2, r3, #28
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f7fd f9b4 	bl	80058a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3316      	adds	r3, #22
 8008544:	6939      	ldr	r1, [r7, #16]
 8008546:	4618      	mov	r0, r3
 8008548:	f7fd f9ae 	bl	80058a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3312      	adds	r3, #18
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd f98d 	bl	8005872 <st_word>
					fs->wflag = 1;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2201      	movs	r2, #1
 800855c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fd fc29 	bl	8005db8 <sync_fs>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7d1b      	ldrb	r3, [r3, #20]
 800856e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008572:	b2da      	uxtb	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008578:	7dfb      	ldrb	r3, [r7, #23]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff ff7b 	bl	8008486 <f_sync>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d118      	bne.n	80085cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f107 0208 	add.w	r2, r7, #8
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff fa34 	bl	8007a10 <validate>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10c      	bne.n	80085cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd fb2c 	bl	8005c14 <dec_lock>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b090      	sub	sp, #64	; 0x40
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f107 0208 	add.w	r2, r7, #8
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fa11 	bl	8007a10 <validate>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80085f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <f_lseek+0x2e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7d5b      	ldrb	r3, [r3, #21]
 8008600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008604:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <f_lseek+0x3c>
 800860c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008610:	e201      	b.n	8008a16 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80d9 	beq.w	80087ce <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008622:	d15a      	bne.n	80086da <f_lseek+0x104>
			tbl = fp->cltbl;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	627a      	str	r2, [r7, #36]	; 0x24
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	2302      	movs	r3, #2
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2b00      	cmp	r3, #0
 8008642:	d03a      	beq.n	80086ba <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	2300      	movs	r3, #0
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	3302      	adds	r3, #2
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	3301      	adds	r3, #1
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd fc38 	bl	8005ed6 <get_fat>
 8008666:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2b01      	cmp	r3, #1
 800866c:	d804      	bhi.n	8008678 <f_lseek+0xa2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	755a      	strb	r2, [r3, #21]
 8008674:	2302      	movs	r3, #2
 8008676:	e1ce      	b.n	8008a16 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	d104      	bne.n	800868a <f_lseek+0xb4>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	755a      	strb	r2, [r3, #21]
 8008686:	2301      	movs	r3, #1
 8008688:	e1c5      	b.n	8008a16 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008690:	429a      	cmp	r2, r3
 8008692:	d0de      	beq.n	8008652 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	429a      	cmp	r2, r3
 800869a:	d809      	bhi.n	80086b0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	627a      	str	r2, [r7, #36]	; 0x24
 80086a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	627a      	str	r2, [r7, #36]	; 0x24
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d3c4      	bcc.n	8008644 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80086c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d803      	bhi.n	80086d2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e19f      	b.n	8008a12 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80086d2:	2311      	movs	r3, #17
 80086d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80086d8:	e19b      	b.n	8008a12 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d902      	bls.n	80086ea <f_lseek+0x114>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 818d 	beq.w	8008a12 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fd fed6 	bl	80064b0 <clmt_clust>
 8008704:	4602      	mov	r2, r0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fd fbc0 	bl	8005e98 <clust2sect>
 8008718:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <f_lseek+0x154>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	755a      	strb	r2, [r3, #21]
 8008726:	2302      	movs	r3, #2
 8008728:	e175      	b.n	8008a16 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	3b01      	subs	r3, #1
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	8992      	ldrh	r2, [r2, #12]
 8008732:	fbb3 f3f2 	udiv	r3, r3, r2
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	8952      	ldrh	r2, [r2, #10]
 800873a:	3a01      	subs	r2, #1
 800873c:	4013      	ands	r3, r2
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	4413      	add	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	8992      	ldrh	r2, [r2, #12]
 800874c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008750:	fb02 f201 	mul.w	r2, r2, r1
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 815b 	beq.w	8008a12 <f_lseek+0x43c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	429a      	cmp	r2, r3
 8008764:	f000 8155 	beq.w	8008a12 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7d1b      	ldrb	r3, [r3, #20]
 800876c:	b25b      	sxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	da18      	bge.n	80087a4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	7858      	ldrb	r0, [r3, #1]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	2301      	movs	r3, #1
 8008782:	f7fc fffd 	bl	8005780 <disk_write>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <f_lseek+0x1c0>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	755a      	strb	r2, [r3, #21]
 8008792:	2301      	movs	r3, #1
 8008794:	e13f      	b.n	8008a16 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7d1b      	ldrb	r3, [r3, #20]
 800879a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	7858      	ldrb	r0, [r3, #1]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ae:	2301      	movs	r3, #1
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	f7fc ffc5 	bl	8005740 <disk_read>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <f_lseek+0x1f0>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	755a      	strb	r2, [r3, #21]
 80087c2:	2301      	movs	r3, #1
 80087c4:	e127      	b.n	8008a16 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	621a      	str	r2, [r3, #32]
 80087cc:	e121      	b.n	8008a12 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d908      	bls.n	80087ea <f_lseek+0x214>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80b5 	beq.w	800896c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	895b      	ldrh	r3, [r3, #10]
 8008806:	461a      	mov	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	899b      	ldrh	r3, [r3, #12]
 800880c:	fb03 f302 	mul.w	r3, r3, r2
 8008810:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01b      	beq.n	8008850 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1e5a      	subs	r2, r3, #1
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	1e59      	subs	r1, r3, #1
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800882c:	429a      	cmp	r2, r3
 800882e:	d30f      	bcc.n	8008850 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	1e5a      	subs	r2, r3, #1
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	425b      	negs	r3, r3
 8008838:	401a      	ands	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	63bb      	str	r3, [r7, #56]	; 0x38
 800884e:	e022      	b.n	8008896 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d119      	bne.n	8008890 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f7fd fd8d 	bl	8006380 <create_chain>
 8008866:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	2b01      	cmp	r3, #1
 800886c:	d104      	bne.n	8008878 <f_lseek+0x2a2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	755a      	strb	r2, [r3, #21]
 8008874:	2302      	movs	r3, #2
 8008876:	e0ce      	b.n	8008a16 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d104      	bne.n	800888a <f_lseek+0x2b4>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	755a      	strb	r2, [r3, #21]
 8008886:	2301      	movs	r3, #1
 8008888:	e0c5      	b.n	8008a16 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800888e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008894:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d067      	beq.n	800896c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800889c:	e03a      	b.n	8008914 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7d1b      	ldrb	r3, [r3, #20]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fd fd5c 	bl	8006380 <create_chain>
 80088c8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d108      	bne.n	80088e2 <f_lseek+0x30c>
							ofs = 0; break;
 80088d0:	2300      	movs	r3, #0
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	e022      	b.n	800891c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fd fafb 	bl	8005ed6 <get_fat>
 80088e0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d104      	bne.n	80088f4 <f_lseek+0x31e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	755a      	strb	r2, [r3, #21]
 80088f0:	2301      	movs	r3, #1
 80088f2:	e090      	b.n	8008a16 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d904      	bls.n	8008904 <f_lseek+0x32e>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008900:	429a      	cmp	r2, r3
 8008902:	d304      	bcc.n	800890e <f_lseek+0x338>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	755a      	strb	r2, [r3, #21]
 800890a:	2302      	movs	r3, #2
 800890c:	e083      	b.n	8008a16 <f_lseek+0x440>
					fp->clust = clst;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008912:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	429a      	cmp	r2, r3
 800891a:	d8c0      	bhi.n	800889e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	441a      	add	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	899b      	ldrh	r3, [r3, #12]
 800892c:	461a      	mov	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	fbb3 f1f2 	udiv	r1, r3, r2
 8008934:	fb02 f201 	mul.w	r2, r2, r1
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d016      	beq.n	800896c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd faa8 	bl	8005e98 <clust2sect>
 8008948:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <f_lseek+0x384>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	755a      	strb	r2, [r3, #21]
 8008956:	2302      	movs	r3, #2
 8008958:	e05d      	b.n	8008a16 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	899b      	ldrh	r3, [r3, #12]
 800895e:	461a      	mov	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	fbb3 f3f2 	udiv	r3, r3, r2
 8008966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008968:	4413      	add	r3, r2
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699a      	ldr	r2, [r3, #24]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	429a      	cmp	r2, r3
 8008976:	d90a      	bls.n	800898e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7d1b      	ldrb	r3, [r3, #20]
 8008984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008988:	b2da      	uxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	8992      	ldrh	r2, [r2, #12]
 8008996:	fbb3 f1f2 	udiv	r1, r3, r2
 800899a:	fb02 f201 	mul.w	r2, r2, r1
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d036      	beq.n	8008a12 <f_lseek+0x43c>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d031      	beq.n	8008a12 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	7d1b      	ldrb	r3, [r3, #20]
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da18      	bge.n	80089ea <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	7858      	ldrb	r0, [r3, #1]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	2301      	movs	r3, #1
 80089c8:	f7fc feda 	bl	8005780 <disk_write>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <f_lseek+0x406>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	755a      	strb	r2, [r3, #21]
 80089d8:	2301      	movs	r3, #1
 80089da:	e01c      	b.n	8008a16 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7d1b      	ldrb	r3, [r3, #20]
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	7858      	ldrb	r0, [r3, #1]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089f4:	2301      	movs	r3, #1
 80089f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f8:	f7fc fea2 	bl	8005740 <disk_read>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <f_lseek+0x436>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	755a      	strb	r2, [r3, #21]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e004      	b.n	8008a16 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a10:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008a12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3740      	adds	r7, #64	; 0x40
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	2b0a      	cmp	r3, #10
 8008a2e:	d103      	bne.n	8008a38 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008a30:	210d      	movs	r1, #13
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fff3 	bl	8008a1e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db25      	blt.n	8008a90 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	60fa      	str	r2, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b3c      	cmp	r3, #60	; 0x3c
 8008a56:	dd12      	ble.n	8008a7e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f103 010c 	add.w	r1, r3, #12
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f107 0308 	add.w	r3, r7, #8
 8008a68:	f7ff fb79 	bl	800815e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d101      	bne.n	8008a78 <putc_bfd+0x5a>
 8008a74:	2300      	movs	r3, #0
 8008a76:	e001      	b.n	8008a7c <putc_bfd+0x5e>
 8008a78:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
 8008a8e:	e000      	b.n	8008a92 <putc_bfd+0x74>
	if (i < 0) return;
 8008a90:	bf00      	nop
}
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	db16      	blt.n	8008ad6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f103 010c 	add.w	r1, r3, #12
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f107 030c 	add.w	r3, r7, #12
 8008abc:	f7ff fb4f 	bl	800815e <f_write>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d107      	bne.n	8008ad6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d102      	bne.n	8008ad6 <putc_flush+0x3e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	e001      	b.n	8008ada <putc_flush+0x42>
	return EOF;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	609a      	str	r2, [r3, #8]
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b096      	sub	sp, #88	; 0x58
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ffe0 	bl	8008ae2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008b22:	e009      	b.n	8008b38 <f_puts+0x2c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff ff73 	bl	8008a1e <putc_bfd>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f1      	bne.n	8008b24 <f_puts+0x18>
	return putc_flush(&pb);
 8008b40:	f107 030c 	add.w	r3, r7, #12
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ffa7 	bl	8008a98 <putc_flush>
 8008b4a:	4603      	mov	r3, r0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3758      	adds	r7, #88	; 0x58
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b62:	2301      	movs	r3, #1
 8008b64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b6a:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b6c:	7a5b      	ldrb	r3, [r3, #9]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d131      	bne.n	8008bd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b74:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b76:	7a5b      	ldrb	r3, [r3, #9]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b7e:	2100      	movs	r1, #0
 8008b80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b82:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b84:	7a5b      	ldrb	r3, [r3, #9]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b94:	7a5b      	ldrb	r3, [r3, #9]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008b9c:	4413      	add	r3, r2
 8008b9e:	79fa      	ldrb	r2, [r7, #7]
 8008ba0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008ba4:	7a5b      	ldrb	r3, [r3, #9]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	b2d1      	uxtb	r1, r2
 8008bac:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <FATFS_LinkDriverEx+0x94>)
 8008bae:	7251      	strb	r1, [r2, #9]
 8008bb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
 8008bb4:	3330      	adds	r3, #48	; 0x30
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	223a      	movs	r2, #58	; 0x3a
 8008bc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	222f      	movs	r2, #47	; 0x2f
 8008bca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3303      	adds	r3, #3
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	200002dc 	.word	0x200002dc

08008bec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff ffaa 	bl	8008b54 <FATFS_LinkDriverEx>
 8008c00:	4603      	mov	r3, r0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c1c:	d802      	bhi.n	8008c24 <ff_convert+0x18>
		c = chr;
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
 8008c20:	81fb      	strh	r3, [r7, #14]
 8008c22:	e025      	b.n	8008c70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	2bff      	cmp	r3, #255	; 0xff
 8008c2e:	d805      	bhi.n	8008c3c <ff_convert+0x30>
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	3b80      	subs	r3, #128	; 0x80
 8008c34:	4a12      	ldr	r2, [pc, #72]	; (8008c80 <ff_convert+0x74>)
 8008c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c3a:	e000      	b.n	8008c3e <ff_convert+0x32>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	81fb      	strh	r3, [r7, #14]
 8008c40:	e016      	b.n	8008c70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008c42:	2300      	movs	r3, #0
 8008c44:	81fb      	strh	r3, [r7, #14]
 8008c46:	e009      	b.n	8008c5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c48:	89fb      	ldrh	r3, [r7, #14]
 8008c4a:	4a0d      	ldr	r2, [pc, #52]	; (8008c80 <ff_convert+0x74>)
 8008c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d006      	beq.n	8008c64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c56:	89fb      	ldrh	r3, [r7, #14]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	81fb      	strh	r3, [r7, #14]
 8008c5c:	89fb      	ldrh	r3, [r7, #14]
 8008c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c60:	d9f2      	bls.n	8008c48 <ff_convert+0x3c>
 8008c62:	e000      	b.n	8008c66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	3380      	adds	r3, #128	; 0x80
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c70:	89fb      	ldrh	r3, [r7, #14]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	08009814 	.word	0x08009814

08008c84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	d201      	bcs.n	8008c9a <ff_wtoupper+0x16>
 8008c96:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <ff_wtoupper+0x10c>)
 8008c98:	e000      	b.n	8008c9c <ff_wtoupper+0x18>
 8008c9a:	4b3e      	ldr	r3, [pc, #248]	; (8008d94 <ff_wtoupper+0x110>)
 8008c9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1c9a      	adds	r2, r3, #2
 8008ca2:	617a      	str	r2, [r7, #20]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008ca8:	8a7b      	ldrh	r3, [r7, #18]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d068      	beq.n	8008d80 <ff_wtoupper+0xfc>
 8008cae:	88fa      	ldrh	r2, [r7, #6]
 8008cb0:	8a7b      	ldrh	r3, [r7, #18]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d364      	bcc.n	8008d80 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	617a      	str	r2, [r7, #20]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	823b      	strh	r3, [r7, #16]
 8008cc0:	8a3b      	ldrh	r3, [r7, #16]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	81fb      	strh	r3, [r7, #14]
 8008cc6:	8a3b      	ldrh	r3, [r7, #16]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008ccc:	88fa      	ldrh	r2, [r7, #6]
 8008cce:	8a79      	ldrh	r1, [r7, #18]
 8008cd0:	8a3b      	ldrh	r3, [r7, #16]
 8008cd2:	440b      	add	r3, r1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	da49      	bge.n	8008d6c <ff_wtoupper+0xe8>
			switch (cmd) {
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d84f      	bhi.n	8008d7e <ff_wtoupper+0xfa>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <ff_wtoupper+0x60>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d1b 	.word	0x08008d1b
 8008cec:	08008d31 	.word	0x08008d31
 8008cf0:	08008d39 	.word	0x08008d39
 8008cf4:	08008d41 	.word	0x08008d41
 8008cf8:	08008d49 	.word	0x08008d49
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008d59 	.word	0x08008d59
 8008d04:	08008d61 	.word	0x08008d61
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	8a7b      	ldrh	r3, [r7, #18]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	80fb      	strh	r3, [r7, #6]
 8008d18:	e027      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008d1a:	88fa      	ldrh	r2, [r7, #6]
 8008d1c:	8a7b      	ldrh	r3, [r7, #18]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	80fb      	strh	r3, [r7, #6]
 8008d2e:	e01c      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	3b10      	subs	r3, #16
 8008d34:	80fb      	strh	r3, [r7, #6]
 8008d36:	e018      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008d38:	88fb      	ldrh	r3, [r7, #6]
 8008d3a:	3b20      	subs	r3, #32
 8008d3c:	80fb      	strh	r3, [r7, #6]
 8008d3e:	e014      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	3b30      	subs	r3, #48	; 0x30
 8008d44:	80fb      	strh	r3, [r7, #6]
 8008d46:	e010      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008d48:	88fb      	ldrh	r3, [r7, #6]
 8008d4a:	3b1a      	subs	r3, #26
 8008d4c:	80fb      	strh	r3, [r7, #6]
 8008d4e:	e00c      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008d50:	88fb      	ldrh	r3, [r7, #6]
 8008d52:	3308      	adds	r3, #8
 8008d54:	80fb      	strh	r3, [r7, #6]
 8008d56:	e008      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	3b50      	subs	r3, #80	; 0x50
 8008d5c:	80fb      	strh	r3, [r7, #6]
 8008d5e:	e004      	b.n	8008d6a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008d66:	80fb      	strh	r3, [r7, #6]
 8008d68:	bf00      	nop
			}
			break;
 8008d6a:	e008      	b.n	8008d7e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d195      	bne.n	8008c9e <ff_wtoupper+0x1a>
 8008d72:	8a3b      	ldrh	r3, [r7, #16]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4413      	add	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008d7c:	e78f      	b.n	8008c9e <ff_wtoupper+0x1a>
			break;
 8008d7e:	bf00      	nop
	}

	return chr;
 8008d80:	88fb      	ldrh	r3, [r7, #6]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	08009914 	.word	0x08009914
 8008d94:	08009b08 	.word	0x08009b08

08008d98 <__errno>:
 8008d98:	4b01      	ldr	r3, [pc, #4]	; (8008da0 <__errno+0x8>)
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	2000002c 	.word	0x2000002c

08008da4 <__libc_init_array>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4d0d      	ldr	r5, [pc, #52]	; (8008ddc <__libc_init_array+0x38>)
 8008da8:	4c0d      	ldr	r4, [pc, #52]	; (8008de0 <__libc_init_array+0x3c>)
 8008daa:	1b64      	subs	r4, r4, r5
 8008dac:	10a4      	asrs	r4, r4, #2
 8008dae:	2600      	movs	r6, #0
 8008db0:	42a6      	cmp	r6, r4
 8008db2:	d109      	bne.n	8008dc8 <__libc_init_array+0x24>
 8008db4:	4d0b      	ldr	r5, [pc, #44]	; (8008de4 <__libc_init_array+0x40>)
 8008db6:	4c0c      	ldr	r4, [pc, #48]	; (8008de8 <__libc_init_array+0x44>)
 8008db8:	f000 fc4e 	bl	8009658 <_init>
 8008dbc:	1b64      	subs	r4, r4, r5
 8008dbe:	10a4      	asrs	r4, r4, #2
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	42a6      	cmp	r6, r4
 8008dc4:	d105      	bne.n	8008dd2 <__libc_init_array+0x2e>
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dcc:	4798      	blx	r3
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7ee      	b.n	8008db0 <__libc_init_array+0xc>
 8008dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd6:	4798      	blx	r3
 8008dd8:	3601      	adds	r6, #1
 8008dda:	e7f2      	b.n	8008dc2 <__libc_init_array+0x1e>
 8008ddc:	08009c00 	.word	0x08009c00
 8008de0:	08009c00 	.word	0x08009c00
 8008de4:	08009c00 	.word	0x08009c00
 8008de8:	08009c04 	.word	0x08009c04

08008dec <memset>:
 8008dec:	4402      	add	r2, r0
 8008dee:	4603      	mov	r3, r0
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d100      	bne.n	8008df6 <memset+0xa>
 8008df4:	4770      	bx	lr
 8008df6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dfa:	e7f9      	b.n	8008df0 <memset+0x4>

08008dfc <siprintf>:
 8008dfc:	b40e      	push	{r1, r2, r3}
 8008dfe:	b500      	push	{lr}
 8008e00:	b09c      	sub	sp, #112	; 0x70
 8008e02:	ab1d      	add	r3, sp, #116	; 0x74
 8008e04:	9002      	str	r0, [sp, #8]
 8008e06:	9006      	str	r0, [sp, #24]
 8008e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e0c:	4809      	ldr	r0, [pc, #36]	; (8008e34 <siprintf+0x38>)
 8008e0e:	9107      	str	r1, [sp, #28]
 8008e10:	9104      	str	r1, [sp, #16]
 8008e12:	4909      	ldr	r1, [pc, #36]	; (8008e38 <siprintf+0x3c>)
 8008e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	6800      	ldr	r0, [r0, #0]
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	a902      	add	r1, sp, #8
 8008e20:	f000 f868 	bl	8008ef4 <_svfiprintf_r>
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	b01c      	add	sp, #112	; 0x70
 8008e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e30:	b003      	add	sp, #12
 8008e32:	4770      	bx	lr
 8008e34:	2000002c 	.word	0x2000002c
 8008e38:	ffff0208 	.word	0xffff0208

08008e3c <__ssputs_r>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	688e      	ldr	r6, [r1, #8]
 8008e42:	429e      	cmp	r6, r3
 8008e44:	4682      	mov	sl, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4690      	mov	r8, r2
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	d838      	bhi.n	8008ec0 <__ssputs_r+0x84>
 8008e4e:	898a      	ldrh	r2, [r1, #12]
 8008e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e54:	d032      	beq.n	8008ebc <__ssputs_r+0x80>
 8008e56:	6825      	ldr	r5, [r4, #0]
 8008e58:	6909      	ldr	r1, [r1, #16]
 8008e5a:	eba5 0901 	sub.w	r9, r5, r1
 8008e5e:	6965      	ldr	r5, [r4, #20]
 8008e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e68:	3301      	adds	r3, #1
 8008e6a:	444b      	add	r3, r9
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	429d      	cmp	r5, r3
 8008e70:	bf38      	it	cc
 8008e72:	461d      	movcc	r5, r3
 8008e74:	0553      	lsls	r3, r2, #21
 8008e76:	d531      	bpl.n	8008edc <__ssputs_r+0xa0>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f000 fb47 	bl	800950c <_malloc_r>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	b950      	cbnz	r0, 8008e98 <__ssputs_r+0x5c>
 8008e82:	230c      	movs	r3, #12
 8008e84:	f8ca 3000 	str.w	r3, [sl]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e98:	6921      	ldr	r1, [r4, #16]
 8008e9a:	464a      	mov	r2, r9
 8008e9c:	f000 fabe 	bl	800941c <memcpy>
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	6126      	str	r6, [r4, #16]
 8008eae:	6165      	str	r5, [r4, #20]
 8008eb0:	444e      	add	r6, r9
 8008eb2:	eba5 0509 	sub.w	r5, r5, r9
 8008eb6:	6026      	str	r6, [r4, #0]
 8008eb8:	60a5      	str	r5, [r4, #8]
 8008eba:	463e      	mov	r6, r7
 8008ebc:	42be      	cmp	r6, r7
 8008ebe:	d900      	bls.n	8008ec2 <__ssputs_r+0x86>
 8008ec0:	463e      	mov	r6, r7
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	f000 fab6 	bl	8009438 <memmove>
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	6822      	ldr	r2, [r4, #0]
 8008ed0:	1b9b      	subs	r3, r3, r6
 8008ed2:	4432      	add	r2, r6
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e7db      	b.n	8008e94 <__ssputs_r+0x58>
 8008edc:	462a      	mov	r2, r5
 8008ede:	f000 fb6f 	bl	80095c0 <_realloc_r>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1e1      	bne.n	8008eac <__ssputs_r+0x70>
 8008ee8:	6921      	ldr	r1, [r4, #16]
 8008eea:	4650      	mov	r0, sl
 8008eec:	f000 fabe 	bl	800946c <_free_r>
 8008ef0:	e7c7      	b.n	8008e82 <__ssputs_r+0x46>
	...

08008ef4 <_svfiprintf_r>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4698      	mov	r8, r3
 8008efa:	898b      	ldrh	r3, [r1, #12]
 8008efc:	061b      	lsls	r3, r3, #24
 8008efe:	b09d      	sub	sp, #116	; 0x74
 8008f00:	4607      	mov	r7, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	d50e      	bpl.n	8008f26 <_svfiprintf_r+0x32>
 8008f08:	690b      	ldr	r3, [r1, #16]
 8008f0a:	b963      	cbnz	r3, 8008f26 <_svfiprintf_r+0x32>
 8008f0c:	2140      	movs	r1, #64	; 0x40
 8008f0e:	f000 fafd 	bl	800950c <_malloc_r>
 8008f12:	6028      	str	r0, [r5, #0]
 8008f14:	6128      	str	r0, [r5, #16]
 8008f16:	b920      	cbnz	r0, 8008f22 <_svfiprintf_r+0x2e>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	e0d1      	b.n	80090c6 <_svfiprintf_r+0x1d2>
 8008f22:	2340      	movs	r3, #64	; 0x40
 8008f24:	616b      	str	r3, [r5, #20]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2a:	2320      	movs	r3, #32
 8008f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f34:	2330      	movs	r3, #48	; 0x30
 8008f36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090e0 <_svfiprintf_r+0x1ec>
 8008f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f3e:	f04f 0901 	mov.w	r9, #1
 8008f42:	4623      	mov	r3, r4
 8008f44:	469a      	mov	sl, r3
 8008f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f4a:	b10a      	cbz	r2, 8008f50 <_svfiprintf_r+0x5c>
 8008f4c:	2a25      	cmp	r2, #37	; 0x25
 8008f4e:	d1f9      	bne.n	8008f44 <_svfiprintf_r+0x50>
 8008f50:	ebba 0b04 	subs.w	fp, sl, r4
 8008f54:	d00b      	beq.n	8008f6e <_svfiprintf_r+0x7a>
 8008f56:	465b      	mov	r3, fp
 8008f58:	4622      	mov	r2, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f7ff ff6d 	bl	8008e3c <__ssputs_r>
 8008f62:	3001      	adds	r0, #1
 8008f64:	f000 80aa 	beq.w	80090bc <_svfiprintf_r+0x1c8>
 8008f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f6a:	445a      	add	r2, fp
 8008f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 80a2 	beq.w	80090bc <_svfiprintf_r+0x1c8>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f82:	f10a 0a01 	add.w	sl, sl, #1
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8008f90:	4654      	mov	r4, sl
 8008f92:	2205      	movs	r2, #5
 8008f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f98:	4851      	ldr	r0, [pc, #324]	; (80090e0 <_svfiprintf_r+0x1ec>)
 8008f9a:	f7f7 f921 	bl	80001e0 <memchr>
 8008f9e:	9a04      	ldr	r2, [sp, #16]
 8008fa0:	b9d8      	cbnz	r0, 8008fda <_svfiprintf_r+0xe6>
 8008fa2:	06d0      	lsls	r0, r2, #27
 8008fa4:	bf44      	itt	mi
 8008fa6:	2320      	movmi	r3, #32
 8008fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fac:	0711      	lsls	r1, r2, #28
 8008fae:	bf44      	itt	mi
 8008fb0:	232b      	movmi	r3, #43	; 0x2b
 8008fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fba:	2b2a      	cmp	r3, #42	; 0x2a
 8008fbc:	d015      	beq.n	8008fea <_svfiprintf_r+0xf6>
 8008fbe:	9a07      	ldr	r2, [sp, #28]
 8008fc0:	4654      	mov	r4, sl
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f04f 0c0a 	mov.w	ip, #10
 8008fc8:	4621      	mov	r1, r4
 8008fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fce:	3b30      	subs	r3, #48	; 0x30
 8008fd0:	2b09      	cmp	r3, #9
 8008fd2:	d94e      	bls.n	8009072 <_svfiprintf_r+0x17e>
 8008fd4:	b1b0      	cbz	r0, 8009004 <_svfiprintf_r+0x110>
 8008fd6:	9207      	str	r2, [sp, #28]
 8008fd8:	e014      	b.n	8009004 <_svfiprintf_r+0x110>
 8008fda:	eba0 0308 	sub.w	r3, r0, r8
 8008fde:	fa09 f303 	lsl.w	r3, r9, r3
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	46a2      	mov	sl, r4
 8008fe8:	e7d2      	b.n	8008f90 <_svfiprintf_r+0x9c>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	1d19      	adds	r1, r3, #4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	9103      	str	r1, [sp, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	bfbb      	ittet	lt
 8008ff6:	425b      	neglt	r3, r3
 8008ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8008ffc:	9307      	strge	r3, [sp, #28]
 8008ffe:	9307      	strlt	r3, [sp, #28]
 8009000:	bfb8      	it	lt
 8009002:	9204      	strlt	r2, [sp, #16]
 8009004:	7823      	ldrb	r3, [r4, #0]
 8009006:	2b2e      	cmp	r3, #46	; 0x2e
 8009008:	d10c      	bne.n	8009024 <_svfiprintf_r+0x130>
 800900a:	7863      	ldrb	r3, [r4, #1]
 800900c:	2b2a      	cmp	r3, #42	; 0x2a
 800900e:	d135      	bne.n	800907c <_svfiprintf_r+0x188>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	1d1a      	adds	r2, r3, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	9203      	str	r2, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfb8      	it	lt
 800901c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009020:	3402      	adds	r4, #2
 8009022:	9305      	str	r3, [sp, #20]
 8009024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090f0 <_svfiprintf_r+0x1fc>
 8009028:	7821      	ldrb	r1, [r4, #0]
 800902a:	2203      	movs	r2, #3
 800902c:	4650      	mov	r0, sl
 800902e:	f7f7 f8d7 	bl	80001e0 <memchr>
 8009032:	b140      	cbz	r0, 8009046 <_svfiprintf_r+0x152>
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	eba0 000a 	sub.w	r0, r0, sl
 800903a:	fa03 f000 	lsl.w	r0, r3, r0
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	4303      	orrs	r3, r0
 8009042:	3401      	adds	r4, #1
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	4826      	ldr	r0, [pc, #152]	; (80090e4 <_svfiprintf_r+0x1f0>)
 800904c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009050:	2206      	movs	r2, #6
 8009052:	f7f7 f8c5 	bl	80001e0 <memchr>
 8009056:	2800      	cmp	r0, #0
 8009058:	d038      	beq.n	80090cc <_svfiprintf_r+0x1d8>
 800905a:	4b23      	ldr	r3, [pc, #140]	; (80090e8 <_svfiprintf_r+0x1f4>)
 800905c:	bb1b      	cbnz	r3, 80090a6 <_svfiprintf_r+0x1b2>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	3307      	adds	r3, #7
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	3308      	adds	r3, #8
 8009068:	9303      	str	r3, [sp, #12]
 800906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906c:	4433      	add	r3, r6
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	e767      	b.n	8008f42 <_svfiprintf_r+0x4e>
 8009072:	fb0c 3202 	mla	r2, ip, r2, r3
 8009076:	460c      	mov	r4, r1
 8009078:	2001      	movs	r0, #1
 800907a:	e7a5      	b.n	8008fc8 <_svfiprintf_r+0xd4>
 800907c:	2300      	movs	r3, #0
 800907e:	3401      	adds	r4, #1
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	4619      	mov	r1, r3
 8009084:	f04f 0c0a 	mov.w	ip, #10
 8009088:	4620      	mov	r0, r4
 800908a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800908e:	3a30      	subs	r2, #48	; 0x30
 8009090:	2a09      	cmp	r2, #9
 8009092:	d903      	bls.n	800909c <_svfiprintf_r+0x1a8>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0c5      	beq.n	8009024 <_svfiprintf_r+0x130>
 8009098:	9105      	str	r1, [sp, #20]
 800909a:	e7c3      	b.n	8009024 <_svfiprintf_r+0x130>
 800909c:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a0:	4604      	mov	r4, r0
 80090a2:	2301      	movs	r3, #1
 80090a4:	e7f0      	b.n	8009088 <_svfiprintf_r+0x194>
 80090a6:	ab03      	add	r3, sp, #12
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	462a      	mov	r2, r5
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <_svfiprintf_r+0x1f8>)
 80090ae:	a904      	add	r1, sp, #16
 80090b0:	4638      	mov	r0, r7
 80090b2:	f3af 8000 	nop.w
 80090b6:	1c42      	adds	r2, r0, #1
 80090b8:	4606      	mov	r6, r0
 80090ba:	d1d6      	bne.n	800906a <_svfiprintf_r+0x176>
 80090bc:	89ab      	ldrh	r3, [r5, #12]
 80090be:	065b      	lsls	r3, r3, #25
 80090c0:	f53f af2c 	bmi.w	8008f1c <_svfiprintf_r+0x28>
 80090c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c6:	b01d      	add	sp, #116	; 0x74
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <_svfiprintf_r+0x1f8>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4638      	mov	r0, r7
 80090d8:	f000 f87a 	bl	80091d0 <_printf_i>
 80090dc:	e7eb      	b.n	80090b6 <_svfiprintf_r+0x1c2>
 80090de:	bf00      	nop
 80090e0:	08009bc4 	.word	0x08009bc4
 80090e4:	08009bce 	.word	0x08009bce
 80090e8:	00000000 	.word	0x00000000
 80090ec:	08008e3d 	.word	0x08008e3d
 80090f0:	08009bca 	.word	0x08009bca

080090f4 <_printf_common>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4616      	mov	r6, r2
 80090fa:	4699      	mov	r9, r3
 80090fc:	688a      	ldr	r2, [r1, #8]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009104:	4293      	cmp	r3, r2
 8009106:	bfb8      	it	lt
 8009108:	4613      	movlt	r3, r2
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009110:	4607      	mov	r7, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b10a      	cbz	r2, 800911a <_printf_common+0x26>
 8009116:	3301      	adds	r3, #1
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	0699      	lsls	r1, r3, #26
 800911e:	bf42      	ittt	mi
 8009120:	6833      	ldrmi	r3, [r6, #0]
 8009122:	3302      	addmi	r3, #2
 8009124:	6033      	strmi	r3, [r6, #0]
 8009126:	6825      	ldr	r5, [r4, #0]
 8009128:	f015 0506 	ands.w	r5, r5, #6
 800912c:	d106      	bne.n	800913c <_printf_common+0x48>
 800912e:	f104 0a19 	add.w	sl, r4, #25
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	6832      	ldr	r2, [r6, #0]
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc26      	bgt.n	800918a <_printf_common+0x96>
 800913c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009140:	1e13      	subs	r3, r2, #0
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	bf18      	it	ne
 8009146:	2301      	movne	r3, #1
 8009148:	0692      	lsls	r2, r2, #26
 800914a:	d42b      	bmi.n	80091a4 <_printf_common+0xb0>
 800914c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009150:	4649      	mov	r1, r9
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	3001      	adds	r0, #1
 8009158:	d01e      	beq.n	8009198 <_printf_common+0xa4>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	68e5      	ldr	r5, [r4, #12]
 800915e:	6832      	ldr	r2, [r6, #0]
 8009160:	f003 0306 	and.w	r3, r3, #6
 8009164:	2b04      	cmp	r3, #4
 8009166:	bf08      	it	eq
 8009168:	1aad      	subeq	r5, r5, r2
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	bf0c      	ite	eq
 8009170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009174:	2500      	movne	r5, #0
 8009176:	4293      	cmp	r3, r2
 8009178:	bfc4      	itt	gt
 800917a:	1a9b      	subgt	r3, r3, r2
 800917c:	18ed      	addgt	r5, r5, r3
 800917e:	2600      	movs	r6, #0
 8009180:	341a      	adds	r4, #26
 8009182:	42b5      	cmp	r5, r6
 8009184:	d11a      	bne.n	80091bc <_printf_common+0xc8>
 8009186:	2000      	movs	r0, #0
 8009188:	e008      	b.n	800919c <_printf_common+0xa8>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4649      	mov	r1, r9
 8009190:	4638      	mov	r0, r7
 8009192:	47c0      	blx	r8
 8009194:	3001      	adds	r0, #1
 8009196:	d103      	bne.n	80091a0 <_printf_common+0xac>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7c6      	b.n	8009132 <_printf_common+0x3e>
 80091a4:	18e1      	adds	r1, r4, r3
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	2030      	movs	r0, #48	; 0x30
 80091aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ae:	4422      	add	r2, r4
 80091b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b8:	3302      	adds	r3, #2
 80091ba:	e7c7      	b.n	800914c <_printf_common+0x58>
 80091bc:	2301      	movs	r3, #1
 80091be:	4622      	mov	r2, r4
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	47c0      	blx	r8
 80091c6:	3001      	adds	r0, #1
 80091c8:	d0e6      	beq.n	8009198 <_printf_common+0xa4>
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7d9      	b.n	8009182 <_printf_common+0x8e>
	...

080091d0 <_printf_i>:
 80091d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	4691      	mov	r9, r2
 80091d8:	7e27      	ldrb	r7, [r4, #24]
 80091da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091dc:	2f78      	cmp	r7, #120	; 0x78
 80091de:	4680      	mov	r8, r0
 80091e0:	469a      	mov	sl, r3
 80091e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e6:	d807      	bhi.n	80091f8 <_printf_i+0x28>
 80091e8:	2f62      	cmp	r7, #98	; 0x62
 80091ea:	d80a      	bhi.n	8009202 <_printf_i+0x32>
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	f000 80d8 	beq.w	80093a2 <_printf_i+0x1d2>
 80091f2:	2f58      	cmp	r7, #88	; 0x58
 80091f4:	f000 80a3 	beq.w	800933e <_printf_i+0x16e>
 80091f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009200:	e03a      	b.n	8009278 <_printf_i+0xa8>
 8009202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009206:	2b15      	cmp	r3, #21
 8009208:	d8f6      	bhi.n	80091f8 <_printf_i+0x28>
 800920a:	a001      	add	r0, pc, #4	; (adr r0, 8009210 <_printf_i+0x40>)
 800920c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009210:	08009269 	.word	0x08009269
 8009214:	0800927d 	.word	0x0800927d
 8009218:	080091f9 	.word	0x080091f9
 800921c:	080091f9 	.word	0x080091f9
 8009220:	080091f9 	.word	0x080091f9
 8009224:	080091f9 	.word	0x080091f9
 8009228:	0800927d 	.word	0x0800927d
 800922c:	080091f9 	.word	0x080091f9
 8009230:	080091f9 	.word	0x080091f9
 8009234:	080091f9 	.word	0x080091f9
 8009238:	080091f9 	.word	0x080091f9
 800923c:	08009389 	.word	0x08009389
 8009240:	080092ad 	.word	0x080092ad
 8009244:	0800936b 	.word	0x0800936b
 8009248:	080091f9 	.word	0x080091f9
 800924c:	080091f9 	.word	0x080091f9
 8009250:	080093ab 	.word	0x080093ab
 8009254:	080091f9 	.word	0x080091f9
 8009258:	080092ad 	.word	0x080092ad
 800925c:	080091f9 	.word	0x080091f9
 8009260:	080091f9 	.word	0x080091f9
 8009264:	08009373 	.word	0x08009373
 8009268:	680b      	ldr	r3, [r1, #0]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	600a      	str	r2, [r1, #0]
 8009270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009278:	2301      	movs	r3, #1
 800927a:	e0a3      	b.n	80093c4 <_printf_i+0x1f4>
 800927c:	6825      	ldr	r5, [r4, #0]
 800927e:	6808      	ldr	r0, [r1, #0]
 8009280:	062e      	lsls	r6, r5, #24
 8009282:	f100 0304 	add.w	r3, r0, #4
 8009286:	d50a      	bpl.n	800929e <_printf_i+0xce>
 8009288:	6805      	ldr	r5, [r0, #0]
 800928a:	600b      	str	r3, [r1, #0]
 800928c:	2d00      	cmp	r5, #0
 800928e:	da03      	bge.n	8009298 <_printf_i+0xc8>
 8009290:	232d      	movs	r3, #45	; 0x2d
 8009292:	426d      	negs	r5, r5
 8009294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009298:	485e      	ldr	r0, [pc, #376]	; (8009414 <_printf_i+0x244>)
 800929a:	230a      	movs	r3, #10
 800929c:	e019      	b.n	80092d2 <_printf_i+0x102>
 800929e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092a2:	6805      	ldr	r5, [r0, #0]
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	bf18      	it	ne
 80092a8:	b22d      	sxthne	r5, r5
 80092aa:	e7ef      	b.n	800928c <_printf_i+0xbc>
 80092ac:	680b      	ldr	r3, [r1, #0]
 80092ae:	6825      	ldr	r5, [r4, #0]
 80092b0:	1d18      	adds	r0, r3, #4
 80092b2:	6008      	str	r0, [r1, #0]
 80092b4:	0628      	lsls	r0, r5, #24
 80092b6:	d501      	bpl.n	80092bc <_printf_i+0xec>
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <_printf_i+0xf2>
 80092bc:	0669      	lsls	r1, r5, #25
 80092be:	d5fb      	bpl.n	80092b8 <_printf_i+0xe8>
 80092c0:	881d      	ldrh	r5, [r3, #0]
 80092c2:	4854      	ldr	r0, [pc, #336]	; (8009414 <_printf_i+0x244>)
 80092c4:	2f6f      	cmp	r7, #111	; 0x6f
 80092c6:	bf0c      	ite	eq
 80092c8:	2308      	moveq	r3, #8
 80092ca:	230a      	movne	r3, #10
 80092cc:	2100      	movs	r1, #0
 80092ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d2:	6866      	ldr	r6, [r4, #4]
 80092d4:	60a6      	str	r6, [r4, #8]
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	bfa2      	ittt	ge
 80092da:	6821      	ldrge	r1, [r4, #0]
 80092dc:	f021 0104 	bicge.w	r1, r1, #4
 80092e0:	6021      	strge	r1, [r4, #0]
 80092e2:	b90d      	cbnz	r5, 80092e8 <_printf_i+0x118>
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	d04d      	beq.n	8009384 <_printf_i+0x1b4>
 80092e8:	4616      	mov	r6, r2
 80092ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ee:	fb03 5711 	mls	r7, r3, r1, r5
 80092f2:	5dc7      	ldrb	r7, [r0, r7]
 80092f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092f8:	462f      	mov	r7, r5
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	460d      	mov	r5, r1
 80092fe:	d9f4      	bls.n	80092ea <_printf_i+0x11a>
 8009300:	2b08      	cmp	r3, #8
 8009302:	d10b      	bne.n	800931c <_printf_i+0x14c>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	07df      	lsls	r7, r3, #31
 8009308:	d508      	bpl.n	800931c <_printf_i+0x14c>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4299      	cmp	r1, r3
 8009310:	bfde      	ittt	le
 8009312:	2330      	movle	r3, #48	; 0x30
 8009314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800931c:	1b92      	subs	r2, r2, r6
 800931e:	6122      	str	r2, [r4, #16]
 8009320:	f8cd a000 	str.w	sl, [sp]
 8009324:	464b      	mov	r3, r9
 8009326:	aa03      	add	r2, sp, #12
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f7ff fee2 	bl	80090f4 <_printf_common>
 8009330:	3001      	adds	r0, #1
 8009332:	d14c      	bne.n	80093ce <_printf_i+0x1fe>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b004      	add	sp, #16
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	4835      	ldr	r0, [pc, #212]	; (8009414 <_printf_i+0x244>)
 8009340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	680e      	ldr	r6, [r1, #0]
 8009348:	061f      	lsls	r7, r3, #24
 800934a:	f856 5b04 	ldr.w	r5, [r6], #4
 800934e:	600e      	str	r6, [r1, #0]
 8009350:	d514      	bpl.n	800937c <_printf_i+0x1ac>
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	bf44      	itt	mi
 8009356:	f043 0320 	orrmi.w	r3, r3, #32
 800935a:	6023      	strmi	r3, [r4, #0]
 800935c:	b91d      	cbnz	r5, 8009366 <_printf_i+0x196>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f023 0320 	bic.w	r3, r3, #32
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	2310      	movs	r3, #16
 8009368:	e7b0      	b.n	80092cc <_printf_i+0xfc>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f043 0320 	orr.w	r3, r3, #32
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	2378      	movs	r3, #120	; 0x78
 8009374:	4828      	ldr	r0, [pc, #160]	; (8009418 <_printf_i+0x248>)
 8009376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800937a:	e7e3      	b.n	8009344 <_printf_i+0x174>
 800937c:	065e      	lsls	r6, r3, #25
 800937e:	bf48      	it	mi
 8009380:	b2ad      	uxthmi	r5, r5
 8009382:	e7e6      	b.n	8009352 <_printf_i+0x182>
 8009384:	4616      	mov	r6, r2
 8009386:	e7bb      	b.n	8009300 <_printf_i+0x130>
 8009388:	680b      	ldr	r3, [r1, #0]
 800938a:	6826      	ldr	r6, [r4, #0]
 800938c:	6960      	ldr	r0, [r4, #20]
 800938e:	1d1d      	adds	r5, r3, #4
 8009390:	600d      	str	r5, [r1, #0]
 8009392:	0635      	lsls	r5, r6, #24
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	d501      	bpl.n	800939c <_printf_i+0x1cc>
 8009398:	6018      	str	r0, [r3, #0]
 800939a:	e002      	b.n	80093a2 <_printf_i+0x1d2>
 800939c:	0671      	lsls	r1, r6, #25
 800939e:	d5fb      	bpl.n	8009398 <_printf_i+0x1c8>
 80093a0:	8018      	strh	r0, [r3, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	4616      	mov	r6, r2
 80093a8:	e7ba      	b.n	8009320 <_printf_i+0x150>
 80093aa:	680b      	ldr	r3, [r1, #0]
 80093ac:	1d1a      	adds	r2, r3, #4
 80093ae:	600a      	str	r2, [r1, #0]
 80093b0:	681e      	ldr	r6, [r3, #0]
 80093b2:	6862      	ldr	r2, [r4, #4]
 80093b4:	2100      	movs	r1, #0
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7f6 ff12 	bl	80001e0 <memchr>
 80093bc:	b108      	cbz	r0, 80093c2 <_printf_i+0x1f2>
 80093be:	1b80      	subs	r0, r0, r6
 80093c0:	6060      	str	r0, [r4, #4]
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	2300      	movs	r3, #0
 80093c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093cc:	e7a8      	b.n	8009320 <_printf_i+0x150>
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	4632      	mov	r2, r6
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	47d0      	blx	sl
 80093d8:	3001      	adds	r0, #1
 80093da:	d0ab      	beq.n	8009334 <_printf_i+0x164>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	079b      	lsls	r3, r3, #30
 80093e0:	d413      	bmi.n	800940a <_printf_i+0x23a>
 80093e2:	68e0      	ldr	r0, [r4, #12]
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	4298      	cmp	r0, r3
 80093e8:	bfb8      	it	lt
 80093ea:	4618      	movlt	r0, r3
 80093ec:	e7a4      	b.n	8009338 <_printf_i+0x168>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4632      	mov	r2, r6
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d09b      	beq.n	8009334 <_printf_i+0x164>
 80093fc:	3501      	adds	r5, #1
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	9903      	ldr	r1, [sp, #12]
 8009402:	1a5b      	subs	r3, r3, r1
 8009404:	42ab      	cmp	r3, r5
 8009406:	dcf2      	bgt.n	80093ee <_printf_i+0x21e>
 8009408:	e7eb      	b.n	80093e2 <_printf_i+0x212>
 800940a:	2500      	movs	r5, #0
 800940c:	f104 0619 	add.w	r6, r4, #25
 8009410:	e7f5      	b.n	80093fe <_printf_i+0x22e>
 8009412:	bf00      	nop
 8009414:	08009bd5 	.word	0x08009bd5
 8009418:	08009be6 	.word	0x08009be6

0800941c <memcpy>:
 800941c:	440a      	add	r2, r1
 800941e:	4291      	cmp	r1, r2
 8009420:	f100 33ff 	add.w	r3, r0, #4294967295
 8009424:	d100      	bne.n	8009428 <memcpy+0xc>
 8009426:	4770      	bx	lr
 8009428:	b510      	push	{r4, lr}
 800942a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009432:	4291      	cmp	r1, r2
 8009434:	d1f9      	bne.n	800942a <memcpy+0xe>
 8009436:	bd10      	pop	{r4, pc}

08009438 <memmove>:
 8009438:	4288      	cmp	r0, r1
 800943a:	b510      	push	{r4, lr}
 800943c:	eb01 0402 	add.w	r4, r1, r2
 8009440:	d902      	bls.n	8009448 <memmove+0x10>
 8009442:	4284      	cmp	r4, r0
 8009444:	4623      	mov	r3, r4
 8009446:	d807      	bhi.n	8009458 <memmove+0x20>
 8009448:	1e43      	subs	r3, r0, #1
 800944a:	42a1      	cmp	r1, r4
 800944c:	d008      	beq.n	8009460 <memmove+0x28>
 800944e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009456:	e7f8      	b.n	800944a <memmove+0x12>
 8009458:	4402      	add	r2, r0
 800945a:	4601      	mov	r1, r0
 800945c:	428a      	cmp	r2, r1
 800945e:	d100      	bne.n	8009462 <memmove+0x2a>
 8009460:	bd10      	pop	{r4, pc}
 8009462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800946a:	e7f7      	b.n	800945c <memmove+0x24>

0800946c <_free_r>:
 800946c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800946e:	2900      	cmp	r1, #0
 8009470:	d048      	beq.n	8009504 <_free_r+0x98>
 8009472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009476:	9001      	str	r0, [sp, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f1a1 0404 	sub.w	r4, r1, #4
 800947e:	bfb8      	it	lt
 8009480:	18e4      	addlt	r4, r4, r3
 8009482:	f000 f8d3 	bl	800962c <__malloc_lock>
 8009486:	4a20      	ldr	r2, [pc, #128]	; (8009508 <_free_r+0x9c>)
 8009488:	9801      	ldr	r0, [sp, #4]
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	4615      	mov	r5, r2
 800948e:	b933      	cbnz	r3, 800949e <_free_r+0x32>
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	6014      	str	r4, [r2, #0]
 8009494:	b003      	add	sp, #12
 8009496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949a:	f000 b8cd 	b.w	8009638 <__malloc_unlock>
 800949e:	42a3      	cmp	r3, r4
 80094a0:	d90b      	bls.n	80094ba <_free_r+0x4e>
 80094a2:	6821      	ldr	r1, [r4, #0]
 80094a4:	1862      	adds	r2, r4, r1
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bf04      	itt	eq
 80094aa:	681a      	ldreq	r2, [r3, #0]
 80094ac:	685b      	ldreq	r3, [r3, #4]
 80094ae:	6063      	str	r3, [r4, #4]
 80094b0:	bf04      	itt	eq
 80094b2:	1852      	addeq	r2, r2, r1
 80094b4:	6022      	streq	r2, [r4, #0]
 80094b6:	602c      	str	r4, [r5, #0]
 80094b8:	e7ec      	b.n	8009494 <_free_r+0x28>
 80094ba:	461a      	mov	r2, r3
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b10b      	cbz	r3, 80094c4 <_free_r+0x58>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d9fa      	bls.n	80094ba <_free_r+0x4e>
 80094c4:	6811      	ldr	r1, [r2, #0]
 80094c6:	1855      	adds	r5, r2, r1
 80094c8:	42a5      	cmp	r5, r4
 80094ca:	d10b      	bne.n	80094e4 <_free_r+0x78>
 80094cc:	6824      	ldr	r4, [r4, #0]
 80094ce:	4421      	add	r1, r4
 80094d0:	1854      	adds	r4, r2, r1
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	d1dd      	bne.n	8009494 <_free_r+0x28>
 80094d8:	681c      	ldr	r4, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	6053      	str	r3, [r2, #4]
 80094de:	4421      	add	r1, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	e7d7      	b.n	8009494 <_free_r+0x28>
 80094e4:	d902      	bls.n	80094ec <_free_r+0x80>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	e7d3      	b.n	8009494 <_free_r+0x28>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1961      	adds	r1, r4, r5
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf04      	itt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	6063      	str	r3, [r4, #4]
 80094fa:	bf04      	itt	eq
 80094fc:	1949      	addeq	r1, r1, r5
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6054      	str	r4, [r2, #4]
 8009502:	e7c7      	b.n	8009494 <_free_r+0x28>
 8009504:	b003      	add	sp, #12
 8009506:	bd30      	pop	{r4, r5, pc}
 8009508:	200002e8 	.word	0x200002e8

0800950c <_malloc_r>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	1ccd      	adds	r5, r1, #3
 8009510:	f025 0503 	bic.w	r5, r5, #3
 8009514:	3508      	adds	r5, #8
 8009516:	2d0c      	cmp	r5, #12
 8009518:	bf38      	it	cc
 800951a:	250c      	movcc	r5, #12
 800951c:	2d00      	cmp	r5, #0
 800951e:	4606      	mov	r6, r0
 8009520:	db01      	blt.n	8009526 <_malloc_r+0x1a>
 8009522:	42a9      	cmp	r1, r5
 8009524:	d903      	bls.n	800952e <_malloc_r+0x22>
 8009526:	230c      	movs	r3, #12
 8009528:	6033      	str	r3, [r6, #0]
 800952a:	2000      	movs	r0, #0
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952e:	f000 f87d 	bl	800962c <__malloc_lock>
 8009532:	4921      	ldr	r1, [pc, #132]	; (80095b8 <_malloc_r+0xac>)
 8009534:	680a      	ldr	r2, [r1, #0]
 8009536:	4614      	mov	r4, r2
 8009538:	b99c      	cbnz	r4, 8009562 <_malloc_r+0x56>
 800953a:	4f20      	ldr	r7, [pc, #128]	; (80095bc <_malloc_r+0xb0>)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	b923      	cbnz	r3, 800954a <_malloc_r+0x3e>
 8009540:	4621      	mov	r1, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f862 	bl	800960c <_sbrk_r>
 8009548:	6038      	str	r0, [r7, #0]
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f85d 	bl	800960c <_sbrk_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d123      	bne.n	800959e <_malloc_r+0x92>
 8009556:	230c      	movs	r3, #12
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	4630      	mov	r0, r6
 800955c:	f000 f86c 	bl	8009638 <__malloc_unlock>
 8009560:	e7e3      	b.n	800952a <_malloc_r+0x1e>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	1b5b      	subs	r3, r3, r5
 8009566:	d417      	bmi.n	8009598 <_malloc_r+0x8c>
 8009568:	2b0b      	cmp	r3, #11
 800956a:	d903      	bls.n	8009574 <_malloc_r+0x68>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	441c      	add	r4, r3
 8009570:	6025      	str	r5, [r4, #0]
 8009572:	e004      	b.n	800957e <_malloc_r+0x72>
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	42a2      	cmp	r2, r4
 8009578:	bf0c      	ite	eq
 800957a:	600b      	streq	r3, [r1, #0]
 800957c:	6053      	strne	r3, [r2, #4]
 800957e:	4630      	mov	r0, r6
 8009580:	f000 f85a 	bl	8009638 <__malloc_unlock>
 8009584:	f104 000b 	add.w	r0, r4, #11
 8009588:	1d23      	adds	r3, r4, #4
 800958a:	f020 0007 	bic.w	r0, r0, #7
 800958e:	1ac2      	subs	r2, r0, r3
 8009590:	d0cc      	beq.n	800952c <_malloc_r+0x20>
 8009592:	1a1b      	subs	r3, r3, r0
 8009594:	50a3      	str	r3, [r4, r2]
 8009596:	e7c9      	b.n	800952c <_malloc_r+0x20>
 8009598:	4622      	mov	r2, r4
 800959a:	6864      	ldr	r4, [r4, #4]
 800959c:	e7cc      	b.n	8009538 <_malloc_r+0x2c>
 800959e:	1cc4      	adds	r4, r0, #3
 80095a0:	f024 0403 	bic.w	r4, r4, #3
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d0e3      	beq.n	8009570 <_malloc_r+0x64>
 80095a8:	1a21      	subs	r1, r4, r0
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 f82e 	bl	800960c <_sbrk_r>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d1dd      	bne.n	8009570 <_malloc_r+0x64>
 80095b4:	e7cf      	b.n	8009556 <_malloc_r+0x4a>
 80095b6:	bf00      	nop
 80095b8:	200002e8 	.word	0x200002e8
 80095bc:	200002ec 	.word	0x200002ec

080095c0 <_realloc_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	4607      	mov	r7, r0
 80095c4:	4614      	mov	r4, r2
 80095c6:	460e      	mov	r6, r1
 80095c8:	b921      	cbnz	r1, 80095d4 <_realloc_r+0x14>
 80095ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095ce:	4611      	mov	r1, r2
 80095d0:	f7ff bf9c 	b.w	800950c <_malloc_r>
 80095d4:	b922      	cbnz	r2, 80095e0 <_realloc_r+0x20>
 80095d6:	f7ff ff49 	bl	800946c <_free_r>
 80095da:	4625      	mov	r5, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e0:	f000 f830 	bl	8009644 <_malloc_usable_size_r>
 80095e4:	42a0      	cmp	r0, r4
 80095e6:	d20f      	bcs.n	8009608 <_realloc_r+0x48>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4638      	mov	r0, r7
 80095ec:	f7ff ff8e 	bl	800950c <_malloc_r>
 80095f0:	4605      	mov	r5, r0
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d0f2      	beq.n	80095dc <_realloc_r+0x1c>
 80095f6:	4631      	mov	r1, r6
 80095f8:	4622      	mov	r2, r4
 80095fa:	f7ff ff0f 	bl	800941c <memcpy>
 80095fe:	4631      	mov	r1, r6
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff ff33 	bl	800946c <_free_r>
 8009606:	e7e9      	b.n	80095dc <_realloc_r+0x1c>
 8009608:	4635      	mov	r5, r6
 800960a:	e7e7      	b.n	80095dc <_realloc_r+0x1c>

0800960c <_sbrk_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d06      	ldr	r5, [pc, #24]	; (8009628 <_sbrk_r+0x1c>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f8 f8d8 	bl	80017cc <_sbrk>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_sbrk_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_sbrk_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	20004d7c 	.word	0x20004d7c

0800962c <__malloc_lock>:
 800962c:	4801      	ldr	r0, [pc, #4]	; (8009634 <__malloc_lock+0x8>)
 800962e:	f000 b811 	b.w	8009654 <__retarget_lock_acquire_recursive>
 8009632:	bf00      	nop
 8009634:	20004d84 	.word	0x20004d84

08009638 <__malloc_unlock>:
 8009638:	4801      	ldr	r0, [pc, #4]	; (8009640 <__malloc_unlock+0x8>)
 800963a:	f000 b80c 	b.w	8009656 <__retarget_lock_release_recursive>
 800963e:	bf00      	nop
 8009640:	20004d84 	.word	0x20004d84

08009644 <_malloc_usable_size_r>:
 8009644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009648:	1f18      	subs	r0, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfbc      	itt	lt
 800964e:	580b      	ldrlt	r3, [r1, r0]
 8009650:	18c0      	addlt	r0, r0, r3
 8009652:	4770      	bx	lr

08009654 <__retarget_lock_acquire_recursive>:
 8009654:	4770      	bx	lr

08009656 <__retarget_lock_release_recursive>:
 8009656:	4770      	bx	lr

08009658 <_init>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	bf00      	nop
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr

08009664 <_fini>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr
